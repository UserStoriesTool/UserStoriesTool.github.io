	/**
	 * Create marker if an error appears Create link to UserStory if the UserStory
	 * exists
	 */
	// todo : consider calling it after every quickfix changes
	public void annotationsErrorHandler(ArrayList<String> updatedClasses, String projectPath, String projectName) {
		if (updatedClasses.size() == 0) {
			treeListener.setProgress(100);
			return;
		}

		// Keep backup
		// sources is a HashMap that contains paths and source codes
		Map<String, String> sources = new HashMap<String, String>();
		for (String path : updatedClasses) {
			// Get the IFile from a path
			IFile javaFile = markerManager.findIFile(path);
			if (javaFile != null) {
				ICompilationUnit compilationUnit = (ICompilationUnit) JavaCore.create(javaFile);
				try {
					sources.put(javaFile.getFullPath().toString(),
							compilationUnit.getSource() + System.getProperty("line.separator"));
				} catch (JavaModelException e) {
					e.printStackTrace();
				}
			}
			// Delete the markers. New markers will be created if needed
			markerManager.deleteMarkers(path);
		}
		// BackUp list
		if (BackUpAnnotations.with().getSize() < 20) {
			BackUpAnnotations.with().add((HashMap<String, String>) sources);
		} else {
			BackUpAnnotations.with().remove();
			BackUpAnnotations.with().add((HashMap<String, String>) sources);
		}

		if (projectPath == null || projectName == null || projectPath.equals("") || projectName.equals("")) {
			return;
		}
		// error handling
		try {
			searchFileForExceedingUserStories(updatedClasses, projectPath, projectName);
			searchFileForAnnotations(updatedClasses, projectPath, projectName);
		} catch (JavaModelException | IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * Deletes Links to UserStories if the are no annotations to class or creates
	 * annotations
	 * 
	 * @param updatedClasses : The path of the class that needs to be checked
	 * @param projectPath    : The path of the project that contains the class
	 * @param projectName    : The name of the project that contains the class
	 * @throws IOException
	 * @throws JavaModelException
	 */
	private void searchFileForExceedingUserStories(ArrayList<String> updatedClasses, final String projectPath,
			final String projectName) throws IOException, JavaModelException {

		ArrayList<String> paths = new ArrayList<String>(); // There might be a changes in udpateClasses (avoid
															// ConcurrentModificationException)
		paths.addAll(updatedClasses);
		int progress = 0;
		for (final String path : paths) {
			progress++;
			treeListener.setProgress(((progress / paths.size()) * 100) / 2);// The progress of checking java files.
																			// This method will fill only the
																			// 50%
			if (!lockedPaths.contains(path)) {// If the this path is not locked
				final ArrayList<UserStory> linkedUs = new ArrayList<UserStory>(); // The members that should have the
																					// Annotation in the file (The links
																					// exist in DB)
				linkedUs.addAll(Controller.getInstance().getDatabase().getUserStoriesLinkedToJavaFile(path));
				if (linkedUs.size() != 0) { // if there are UserStories
					if (UserStoryTreeView.currentOpenProjectName == "") {
						return;
					}
					IFile javaFile = markerManager.findIFile(path);
					if (javaFile == null) {
						return;
					}

					ICompilationUnit wcu = ((ICompilationUnit) JavaCore.create(javaFile))
							.getWorkingCopy(new NullProgressMonitor());
					final ASTParser parser = ASTParser.newParser(AST.JLS3);
					parser.setSource(wcu);
					final CompilationUnit astRoot = (CompilationUnit) parser.createAST(null);

					final ASTRewrite rewriter = ASTRewrite.create(astRoot.getAST());
					// If a class or method has been deleted the link will be deleted too
					checkIfATypeHasBeenDeleted(linkedUs);

					astRoot.accept(new ASTVisitor() {
						@Override
						public boolean visit(TypeDeclaration node) {

							ListRewrite lr = rewriter.getListRewrite(node,
									((TypeDeclaration) node).getModifiersProperty());
							NormalAnnotation anno = null;
							for (Object child : lr.getOriginalList()) {
								if (child instanceof NormalAnnotation) {
									if (((NormalAnnotation) child).getTypeName().toString().equals("UserStoryLink")) {
										anno = (NormalAnnotation) child;
									}
								}
							}

							int typeLine = astRoot.getLineNumber(node.getStartPosition());
							ArrayList<String> uids = new ArrayList<String>();
							addUids(uids, anno);

							for (UserStory us : linkedUs) {

								String problem = "There is no Annotation with this uid (" + us.getUid() + ") .";
								if (anno != null) {
									problem += " Add the uid to the Annotation or delete the Link";
								} else {
									problem += " Create the Annotation or delete the Link.";
								}

								if (!uids.contains(us.getUid())) {
									int i = 0;
									while (i < us.getLinks().size()) {
										if (us.getLinks().get(i).getClassName().equals(node.getName().toString())) {
											if (!PreferencesManager.getInstance().getAutoDeleteLinkOnError()) {
												markerManager.createMarker(problem, node.getName().toString(), "",
														typeLine, projectName, path, us.getUid(),
														MarkerManager.MARKER_TYPE1);
											} else {
												us.getLinks().remove(i);
												try {
													us.saveToDisk();
												} catch (IOException e) {
													e.printStackTrace();
												}
												i--;
											}
										}
										i++;
									}
								}
							}

							return true;
						}

						@Override
						public boolean visit(MethodDeclaration node) {
							if (node.getParent() instanceof AnonymousClassDeclaration) {
								return true;
							}
							// lr contains annotations + modifier (ex: private)
							ListRewrite lr = rewriter.getListRewrite(node,
									((MethodDeclaration) node).getModifiersProperty());
							NormalAnnotation anno = null;
							for (int i = 0; i < lr.getOriginalList().size(); i++) {
								if (lr.getOriginalList().get(i) instanceof NormalAnnotation) {
									if (((NormalAnnotation) lr.getOriginalList().get(i)).getTypeName().toString()
											.equals("UserStoryLink")) {
										anno = ((NormalAnnotation) lr.getOriginalList().get(i));
									}

								}
							}
							ArrayList<String> uids = new ArrayList<String>();
							addUids(uids, anno);

							for (UserStory us : linkedUs) {
								if (!uids.contains(us.getUid())) {
									int i = 0;
									while (i < us.getLinks().size()) {
										// if same right class
										if (us.getLinks().get(i).getClassName()
												.equals(((TypeDeclaration) node.getParent()).getName().toString())) {
											// if there is a link to this method
											if (us.getLinks().get(i).getMethodNameList()
													.contains(node.getName().toString())) {
												if (!PreferencesManager.getInstance().getAutoDeleteLinkOnError()) {
													String problem;
													if (anno == null) {
														problem = "There is no Annotation(UserStoryLink) with this uid("
																+ us.getUid() + " )."
																+ " Add the Annotation or delete the Link";
													} else {
														problem = "There is an Annotation(UserStoryLink) but the uid is missing ("
																+ us.getUid() + " )."
																+ " Add the uid or delete the Link";
													}
													markerManager.createMarker(problem,
															((TypeDeclaration) node.getParent()).getName().toString(),
															node.getName().toString(),
															astRoot.getLineNumber(node.getStartPosition()), projectName,
															path, us.getUid(), MarkerManager.MARKER_TYPE1);
												} else {
													us.getLinks().get(i).getMethodNameList()
															.remove(((MethodDeclaration) node.getParent()).getName()
																	.toString());
													try {
														us.saveToDisk();
													} catch (IOException e) {
														e.printStackTrace();
													}
													i--;
												}
											}
										}
										i++;
									}
								}
							}
							return true;
						}
					});
				}
			}
		}
	}
	private void addUids(ArrayList<String> uids, NormalAnnotation anno) {
		if (anno != null) {
			if (anno.values().size() > 0) {
				List<?> expr = ((ArrayInitializer) ((MemberValuePair) anno.values().get(0)).getValue()).expressions();
				for (Object uid : expr) {
					if (uid instanceof StringLiteral) {
						uids.add(((StringLiteral) uid).getLiteralValue());
					}
				}
			}
		}
	}
	
	/**
	 * Creates links on a UserStory by reading the Annotations or deletes the
	 * Annotation on a Class if the Link is missing from the UserStoryTreeView
	 * 
	 * @param updatedClasses : The path of the class that needs to be checked
	 * @param projectPath    : The path of the project that contains the class
	 * @param projectName    : The name of the project that contains the class
	 * @throws JavaModelException
	 */
	private void searchFileForAnnotations(ArrayList<String> updatedClasses, final String projectPath,
			final String projectName) throws JavaModelException {
		ArrayList<String> paths = new ArrayList<String>(); // There will be changes in udpateClasses (avoid
															// ConcurrentModificationException)
		paths.addAll(updatedClasses);
		int progress = 0;
		for (final String path : paths) {
			progress++;
			treeListener.setProgress((((progress / paths.size()) * 100) / 2) + 50);// The progress of checking the
																					// java files. This method will
																					// fill only the

			if (!lockedPaths.contains(path)) {// If the path is not locked
				updatedClasses.remove(path);
				if (UserStoryTreeView.currentOpenProjectName == "") {
					return;
				}

				IFile javaFile = markerManager.findIFile(path);
				if (javaFile == null) {
					return;
				}
				fixImport(javaFile);

				javaFile = markerManager.findIFile(path);
				if (javaFile == null) {
					return;
				}

				ICompilationUnit wcu = ((ICompilationUnit) JavaCore.create(javaFile))
						.getWorkingCopy(new NullProgressMonitor());
				final ASTParser parser = ASTParser.newParser(AST.JLS3);
				parser.setSource(wcu);
				final CompilationUnit astRoot = (CompilationUnit) parser.createAST(null);

				astRoot.accept(new ASTVisitor() {
					@Override
					public boolean visit(NormalAnnotation anno) {
						ASTNode parent = anno.getParent();
						if (parent.getParent() instanceof AnonymousClassDeclaration) {
							return false;
						}
						// UserStoryLink annotation
						if (anno.getTypeName().toString().equals("UserStoryLink")) {

							ArrayList<String> uids = new ArrayList<String>();
							addUids(uids, anno);

							for (String uid : uids) {
								UserStory parentOfLink = Controller.getInstance().getDatabase().getUserStoryByUID(uid);
								boolean linkExists = false;// check if link exists

								if (parentOfLink == null) {// if not even the UserStory exists create marker

									if (parent instanceof TypeDeclaration) {
										markerManager.createMarker("There is no UserStory with this uid",
												((TypeDeclaration) parent).getName().toString(), "",
												astRoot.getLineNumber(anno.getStartPosition()), projectName, path, uid,
												MarkerManager.MARKER_TYPE2);
									} else if (parent instanceof MethodDeclaration) {
										markerManager.createMarker("There is no UserStory with this uid",
												((TypeDeclaration) parent.getParent()).getName().toString(),
												((MethodDeclaration) parent).getName().toString(),
												astRoot.getLineNumber(anno.getStartPosition()), projectName, path, uid,
												MarkerManager.MARKER_TYPE2);
									}

								} else if (parentOfLink != null) {// if the UserStory exists create the link

									int i = 0;
									while (parentOfLink.getLinks().size() < i) {// check if Link exists
										Link temp = parentOfLink.getLinks().get(i);
										if (parent instanceof TypeDeclaration) {
											if (temp.getSourceFileAbsPath().equals(path) && temp.getClassName()
													.equals(((TypeDeclaration) parent).getName().toString())) {
												linkExists = true;
												break;
											}
										} else if (parent instanceof MethodDeclaration) {
											if (temp.getSourceFileAbsPath().equals(path) && temp.getClassName().equals(
													((TypeDeclaration) parent.getParent()).getName().toString())) {
												linkExists = true;
												break;
											}
										}
										i++;
									}

									if (!linkExists) {// if not create it
										if (parent instanceof TypeDeclaration) {
											Controller.getInstance().getDatabase().autoCreateLink(path,
													uid.replace("\"", ""), "",
													((TypeDeclaration) parent).getName().toString(), projectPath);
										} else if (parent instanceof MethodDeclaration) {
											if (parent.getParent() instanceof AnonymousClassDeclaration) {
												Controller.getInstance().getDatabase().autoCreateLink(path,
														uid.replace("\"", ""),
														((MethodDeclaration) parent).getName().toString(),
														"AnonymousClass", projectPath);
											} else {
												Controller.getInstance().getDatabase().autoCreateLink(path,
														uid.replace("\"", ""),
														((MethodDeclaration) parent).getName().toString(),
														((TypeDeclaration) parent.getParent()).getName().toString(),
														projectPath);
											}
										}
									}
								}
							}
						}
						return true;
					}
				});
			} else {
				System.out.println("locked " + path);
			}
		}
	}
	/**
	 * Check if a Class or a Method has been deleted and there is a link to this
	 * IType. If there is a IType that has been deleted this method will delete the
	 * link from the UserStoryTreeView and the UserStory list
	 * 
	 * @param types    : All the IType of a CompilationUnit
	 * @param linkedUS : The UserStories that are linked to a Class
	 * @throws JavaModelException
	 */
	private void checkIfATypeHasBeenDeleted(ArrayList<UserStory> linkedUS) throws JavaModelException {
		for (UserStory us : linkedUS) {
			int i = 0;
			while (i < us.getLinks().size()) {
				boolean foundClass = false;
				Link link = us.getLinks().get(i);
				IFile javaFile = markerManager.findIFile(link.getSourceFileAbsPath());

				if (javaFile != null) {// if its null the java file has been deleted!
					ICompilationUnit compilationUnit = (ICompilationUnit) JavaCore.create(javaFile);
					String className = link.getClassName();

					for (IType type : compilationUnit.getAllTypes()) {
						if (type.getElementName().equals(className)) {
							foundClass = true;
							boolean foundMethod = false;
							int k = 0;
							while (k < link.getMethodNameList().size()) {
								String methodName = link.getMethodNameList().get(k);
								for (IMethod method : type.getMethods()) {
									if (methodName.equals(method.getElementName())) {
										foundMethod = true;
									}
								}
								if (!foundMethod) {
									link.getMethodNameList().remove(methodName);
									try {
										us.saveToDisk();
									} catch (IOException e) {
										e.printStackTrace();
									}
									k--;
								}
								k++;
							}
						}
					}
				}
				if (!foundClass) {
					us.getLinks().remove(link);
					try {
						us.saveToDisk();
					} catch (IOException e) {
						e.printStackTrace();
					}
					i--;
				}
				i++;
			}
		}
	}