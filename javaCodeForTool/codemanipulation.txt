/**
	 * Add an annotation to a member
	 * 
	 * @param path       : The path of the class file
	 * @param uid        : The uid to add in the Annotation\
	 * @param className  : The name of the class to add the annotation
	 * @param memberName : The name of the member to add the annotation, if any
	 * @param fixImport  : Should add the import on the java file
	 */
	public void addAnnotation(String path, String uid, String className, String memberName, boolean fixImport) {
		IFile javaFile = markerManager.findIFile(path);
		if (javaFile == null) {
			return;
		}
		if (fixImport) {// fix import when needed. Add the import of the annotation
			fixImport(javaFile);
		}
		ICompilationUnit cu = (ICompilationUnit) JavaCore.create(javaFile);
		ArrayList<String> uids = new ArrayList<String>();
		uids.add(uid);
		boolean isClass = false;
		if (memberName.equals("")) {
			isClass = true;
		}
		try {
			addAnnotationToCompilationUnit(cu, uids, className, memberName, isClass);
		} catch (JavaModelException | MalformedTreeException | BadLocationException e) {
			e.printStackTrace();
		}
	}
	/**
	 * Add the Annotation to a CompilationUnit
	 * 
	 * @param cu         : The CompilationUnit
	 * @param uids       : The uids to add
	 * @param className  : The name of the class
	 * @param memberName : The name of the member
	 * @param isClass    : IF true the Annotation will be add on a class
	 * @throws JavaModelException
	 * @throws MalformedTreeException
	 * @throws BadLocationException
	 */
	private void addAnnotationToCompilationUnit(ICompilationUnit cu, ArrayList<String> uids, final String className,
			final String memberName, final boolean isClass)
			throws JavaModelException, MalformedTreeException, BadLocationException {
		currentClass = null;
		currentMember = null;
		classAnnotation = null;
		memberAnnotation = null;

		ICompilationUnit wcu = cu.getWorkingCopy(new NullProgressMonitor());
		final ASTParser parser = ASTParser.newParser(AST.JLS3);
		parser.setSource(wcu);
		final CompilationUnit astRoot = (CompilationUnit) parser.createAST(null);
		if (astRoot.types().size() == 0) {// No class in file
			return;
		}
		if (!isClass) {
			astRoot.accept(new ASTVisitor() {
				@Override
				public boolean visit(MethodDeclaration node) {
					if (node.getName().toString().equals(memberName)) {
						if (((TypeDeclaration) node.getParent()).getName().toString().equals(className)) {
							currentClass = (TypeDeclaration) node.getParent();
							currentMember = node;
							return false;
						}
					}
					return true;
				}
			});
		} else {
			astRoot.accept(new ASTVisitor() {

				@Override
				public boolean visit(TypeDeclaration node) {
					if (node.getName().toString().equals(className)) {
						currentClass = node;
						return false;
					}
					return true;
				}
			});
		}
		astRoot.accept(new ASTVisitor() {
			@Override
			public boolean visit(NormalAnnotation node) {
				if (node.getTypeName().toString().equals("UserStoryLink")) {
					if (node.getParent().equals(currentClass)) {
						classAnnotation = node;
					} else if (node.getParent().equals(currentMember)) {
						memberAnnotation = node;
					}
				}
				return true;
			}
		});
		// create a ASTRewrite
		final AST ast = astRoot.getAST();
		final ASTRewrite rewriter = ASTRewrite.create(ast);
		final NormalAnnotation usAnnotation = astRoot.getAST().newNormalAnnotation();
		usAnnotation.setTypeName(astRoot.getAST().newName("UserStoryLink"));

		ArrayList<String> uidsRestore = new ArrayList<String>();
		ListRewrite cListRewrite;

		LogWriter.debug(astRoot.getTypeRoot().toString());
		for (Object type : getTypes(astRoot)) {
			// Add annotation to the parent class or the subclass
			if (((TypeDeclaration) type).equals(currentClass)) {// if its the parent class
				LogWriter.debug(type.toString());

				if (astRoot.equals(currentClass.getParent())) {
					// The list with every node in the parent class
					cListRewrite = rewriter.getListRewrite(astRoot, CompilationUnit.TYPES_PROPERTY);
				} else {
					cListRewrite = rewriter.getListRewrite(currentClass.getParent(),
							((TypeDeclaration) currentClass.getParent()).getBodyDeclarationsProperty());
				}
				setUidsToRestore(rewriter, currentClass, classAnnotation, uids, uidsRestore);
				uidsRestore.addAll(uids);

				usAnnotation.values().add(createUidsOfAnnotation(ast, uidsRestore));
				LogWriter.debug(currentClass.toString());
				cListRewrite.insertBefore(usAnnotation, currentClass, null);
				uidsRestore.clear();
			}
			/*
			 * else {// if the parent class is a subclass // The list with every node in the
			 * sub class cListRewrite = rewriter.getListRewrite(((TypeDeclaration)
			 * astRoot.types().get(k)), ((TypeDeclaration)
			 * astRoot.types().get(k)).getBodyDeclarationsProperty()); }
			 */
		}
		if (!isClass) {
			NormalAnnotation usAnnotationOnMethod = astRoot.getAST().newNormalAnnotation();
			usAnnotationOnMethod.setTypeName(astRoot.getAST().newName("UserStoryLink"));

			// Add annotation to the method
			final ListRewrite mListRewrite = rewriter.getListRewrite(currentClass,
					currentClass.getBodyDeclarationsProperty());

			setUidsToRestore(rewriter, currentMember, memberAnnotation, uids, uidsRestore);
			uidsRestore.addAll(uids);

			usAnnotationOnMethod.values().add(createUidsOfAnnotation(ast, uidsRestore));
			mListRewrite.insertBefore(usAnnotationOnMethod, currentMember, null);
		}
		saveChanges(rewriter, wcu);
	}
	/**
	 * Remove the uid from an Annotation at the exact path.
	 * 
	 * @param path       : The file that contains the Class
	 * @param uid        : The uid to remove
	 * @param className  : The name of the Class
	 * @param memberName : The name of the member if any
	 * @throws JavaModelException
	 */
	public void deleteAnnotation(String path, final String uid, final String className, final String memberName)
			throws JavaModelException {
		IFile javaFile = markerManager.findIFile(path);
		if (javaFile == null) {
			return;
		}

		ICompilationUnit wcu = ((ICompilationUnit) JavaCore.create(javaFile)).getWorkingCopy(new NullProgressMonitor());
		final ASTParser parser = ASTParser.newParser(AST.JLS3);
		parser.setSource(wcu);
		CompilationUnit astRoot = (CompilationUnit) parser.createAST(null);

		final ASTRewrite rewriter = ASTRewrite.create(astRoot.getAST());
		astRoot.accept(new ASTVisitor() {

			@Override
			// all the annotations in the file
			public boolean visit(NormalAnnotation anno) {
				ASTNode parent = anno.getParent();
				// if its our annotation
				if (anno.getTypeName().toString().equals("UserStoryLink")) {

					ArrayList<String> uidsRestore = new ArrayList<String>();
					ArrayList<String> uids = new ArrayList<String>();
					uids.add(uid);
					// TypeDeclaration and MethodDeclaration extends BodyDeclaration

					final NormalAnnotation usAnnotation = astRoot.getAST().newNormalAnnotation();
					usAnnotation.setTypeName(astRoot.getAST().newName("UserStoryLink"));

					if (parent instanceof TypeDeclaration) {
						if (className.equals("") || (className.equals(((TypeDeclaration) parent).getName().toString())
								&& memberName.equals(""))) {
							for (TypeDeclaration type : getTypes(astRoot)) {
								if (type.equals(parent)) {
									setUidsToRestore(rewriter, ((TypeDeclaration) type), anno, uids, uidsRestore);
									usAnnotation.values().add(createUidsOfAnnotation(astRoot.getAST(), uidsRestore));

									if (type.getParent() instanceof CompilationUnit) {
										if (uidsRestore.size() > 0) {
											rewriter.getListRewrite(astRoot, CompilationUnit.TYPES_PROPERTY)
													.insertAt(usAnnotation, 0, null);
										}
									} else {
										if (uidsRestore.size() > 0) {
											rewriter.getListRewrite(type.getParent(),
													((TypeDeclaration) type.getParent()).getBodyDeclarationsProperty())
													.insertBefore(usAnnotation, parent, null);
										}
									}
								}
							}
						}
					} else if (parent instanceof MethodDeclaration) {
						if (memberName.equals("")
								|| memberName.equals(((MethodDeclaration) parent).getName().toString())) {
							if (((TypeDeclaration) parent.getParent()).getName().toString().equals(className)) {
								setUidsToRestore(rewriter, ((MethodDeclaration) parent), anno, uids, uidsRestore);
								usAnnotation.values().add(createUidsOfAnnotation(astRoot.getAST(), uidsRestore));

								if (uidsRestore.size() > 0) {
									rewriter.getListRewrite(parent, ((MethodDeclaration) parent).getModifiersProperty())
											.insertAt(usAnnotation, 0, null);
								}
							}
						}
					}
				}
				return true;
			}
		});
		saveChanges(rewriter, wcu);
	}
	
	private void saveChanges(ASTRewrite rewriter, ICompilationUnit wcu)
			throws JavaModelException, IllegalArgumentException {
		final TextEdit edits = rewriter.rewriteAST();
		// apply the text edits to the compilation unit
		IDocument document = new Document(wcu.getSource());
		try {
			edits.apply(document);
		} catch (MalformedTreeException | BadLocationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		IBuffer buffer = wcu.getBuffer();
		buffer.setContents(document.get());
		wcu.reconcile(ICompilationUnit.NO_AST, false, null, null);

		// Commit changes
		wcu.commitWorkingCopy(false, null);
		wcu.discardWorkingCopy();
	}
