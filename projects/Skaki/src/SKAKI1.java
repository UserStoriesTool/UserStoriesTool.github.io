
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SKAKI.java
 *
 * Created on Nov 3, 2014, 4:08:14 PM
 */
/**
 *
 * @author user
 */
public class SKAKI1 extends javax.swing.JFrame {

    /** Creates new form SKAKI */
    public SKAKI1() {
        initComponents();
        start1();
        start();
        jLabel120.setText("White Pawns are playing");
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jDialog3 = new javax.swing.JDialog();
        jButtonYes = new javax.swing.JButton();
        jButtonNO = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jPanel47 = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jPanel49 = new javax.swing.JPanel();
        jPanel50 = new javax.swing.JPanel();
        jPanel51 = new javax.swing.JPanel();
        jPanel52 = new javax.swing.JPanel();
        jPanel53 = new javax.swing.JPanel();
        jPanel54 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jPanel56 = new javax.swing.JPanel();
        jPanel57 = new javax.swing.JPanel();
        jPanel58 = new javax.swing.JPanel();
        jPanel59 = new javax.swing.JPanel();
        jPanel60 = new javax.swing.JPanel();
        jPanel61 = new javax.swing.JPanel();
        jPanel62 = new javax.swing.JPanel();
        jPanel63 = new javax.swing.JPanel();
        jPanel64 = new javax.swing.JPanel();
        jLabel120 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        SCORE = new javax.swing.JLabel();
        jPanel65 = new javax.swing.JPanel();
        jPanel66 = new javax.swing.JPanel();
        jPanel67 = new javax.swing.JPanel();
        jPanel68 = new javax.swing.JPanel();
        jPanel69 = new javax.swing.JPanel();
        jPanel71 = new javax.swing.JPanel();
        jPanel70 = new javax.swing.JPanel();
        jPanel72 = new javax.swing.JPanel();
        jPanel74 = new javax.swing.JPanel();
        jPanel73 = new javax.swing.JPanel();
        jPanel75 = new javax.swing.JPanel();
        jPanel76 = new javax.swing.JPanel();
        jPanel77 = new javax.swing.JPanel();
        jPanel78 = new javax.swing.JPanel();
        jPanel79 = new javax.swing.JPanel();
        jPanel89 = new javax.swing.JPanel();
        jPanel92 = new javax.swing.JPanel();
        jPanel85 = new javax.swing.JPanel();
        jPanel94 = new javax.swing.JPanel();
        jPanel81 = new javax.swing.JPanel();
        jPanel90 = new javax.swing.JPanel();
        jPanel86 = new javax.swing.JPanel();
        jPanel95 = new javax.swing.JPanel();
        jPanel83 = new javax.swing.JPanel();
        jPanel96 = new javax.swing.JPanel();
        jPanel84 = new javax.swing.JPanel();
        jPanel93 = new javax.swing.JPanel();
        jPanel91 = new javax.swing.JPanel();
        jPanel87 = new javax.swing.JPanel();
        jPanel82 = new javax.swing.JPanel();
        jPanel88 = new javax.swing.JPanel();
        jPanel80 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuSURRENDER = new javax.swing.JMenuItem();
        jMenuRESTART = new javax.swing.JMenuItem();
        jMenuSCORE = new javax.swing.JMenuItem();
        jMenuUndo = new javax.swing.JMenuItem();
        jINFO = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WhitePawns", "BlackPawns"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("PAWN MOVES:\n\t0: PAWNS~ A pawn moves straight forward one square, if that square is vacant. If it has not yet moved, a pawn also has the option of moving two squares straight forward, provided both squares are vacant. Pawns cannot move backwards.\n\tPawns are the only pieces that capture differently from how they move. A pawn can capture an enemy piece on either of the two squares diagonally in front of the pawn (but cannot move to those squares if they are vacant).\n\n\t1: KNIGHTS~ moves to the nearest square not on the same rank, file, or diagonal. (This can be thought of as moving two squares horizontally then one square vertically, or moving one square horizontally then two squares vertically!\n\n\t2: ROOKS~ moves any number of vacant squares in a horizontal or vertical direction!\n\t\n\t3: BISHOPS~ moves any number of vacant squares in any diagonal direction!\n\n\t4: QUEENS~ moves any number of vacant squares in a horizontal, vertical, or diagonal direction!\n\n\t5: KINGS~ moves exactly one square horizontally, vertically, or diagonally!\nSCORE(EACH):\n\t~PAWNS: 5 POINTS\n\t~KNIGHTS: 30 POINTS\n\t~ROOKS: 50 POINTS\n\t~BISHOPS: 50 POINTS\n\t~QUEENS: 200 POINTS\n\t~KINGS: 500 POINTS");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        jDialog3.setMinimumSize(new java.awt.Dimension(350, 100));

        jButtonYes.setText("YES");
        jButtonYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonYesActionPerformed(evt);
            }
        });

        jButtonNO.setText("NO");
        jButtonNO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jButtonYes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(jButtonNO)
                .addGap(58, 58, 58))
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonYes)
                    .addComponent(jButtonNO))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1200, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));
        jPanel1.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel1.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel1.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 80, -1, -1));

        jPanel3.setBackground(new java.awt.Color(255, 102, 102));
        jPanel3.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel3.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel3.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel2.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel2.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, -1, -1));

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel4.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel4.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
        });
        jPanel4.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 80, -1, -1));

        jPanel5.setBackground(new java.awt.Color(255, 102, 102));
        jPanel5.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel5.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel5.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
        });
        jPanel5.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(691, 80, -1, -1));

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));
        jPanel6.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel6.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel6.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });
        jPanel6.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, -1, -1));

        jPanel7.setBackground(new java.awt.Color(255, 102, 102));
        jPanel7.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel7.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel7.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel7MouseClicked(evt);
            }
        });
        jPanel7.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 80, -1, -1));

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));
        jPanel8.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel8.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel8.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel8MouseClicked(evt);
            }
        });
        jPanel8.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 80, -1, -1));

        jPanel9.setBackground(new java.awt.Color(0, 0, 0));
        jPanel9.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel9.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel9.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel9MouseClicked(evt);
            }
        });
        jPanel9.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, -1, -1));

        jPanel10.setBackground(new java.awt.Color(255, 102, 102));
        jPanel10.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel10.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel10.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel10MouseClicked(evt);
            }
        });
        jPanel10.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 150, -1, -1));

        jPanel11.setBackground(new java.awt.Color(0, 0, 0));
        jPanel11.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel11.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel11.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel11MouseClicked(evt);
            }
        });
        jPanel11.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, -1, -1));

        jPanel12.setBackground(new java.awt.Color(255, 102, 102));
        jPanel12.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel12.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel12.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel12MouseClicked(evt);
            }
        });
        jPanel12.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 150, -1, -1));

        jPanel13.setBackground(new java.awt.Color(0, 0, 0));
        jPanel13.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel13.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel13.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel13MouseClicked(evt);
            }
        });
        jPanel13.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 150, -1, -1));

        jPanel14.setBackground(new java.awt.Color(255, 102, 102));
        jPanel14.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel14.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel14.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel14MouseClicked(evt);
            }
        });
        jPanel14.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 150, -1, -1));

        jPanel15.setBackground(new java.awt.Color(0, 0, 0));
        jPanel15.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel15.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel15.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel15MouseClicked(evt);
            }
        });
        jPanel15.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 150, -1, -1));

        jPanel16.setBackground(new java.awt.Color(255, 102, 102));
        jPanel16.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel16.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel16.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel16MouseClicked(evt);
            }
        });
        jPanel16.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 150, -1, -1));

        jPanel17.setBackground(new java.awt.Color(255, 102, 102));
        jPanel17.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel17.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel17.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel17MouseClicked(evt);
            }
        });
        jPanel17.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 220, -1, -1));

        jPanel18.setBackground(new java.awt.Color(0, 0, 0));
        jPanel18.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel18.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel18.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel18MouseClicked(evt);
            }
        });
        jPanel18.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 220, -1, -1));

        jPanel19.setBackground(new java.awt.Color(255, 102, 102));
        jPanel19.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel19.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel19.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel19MouseClicked(evt);
            }
        });
        jPanel19.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 220, -1, -1));

        jPanel20.setBackground(new java.awt.Color(0, 0, 0));
        jPanel20.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel20.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel20.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel20MouseClicked(evt);
            }
        });
        jPanel20.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 220, -1, -1));

        jPanel21.setBackground(new java.awt.Color(255, 102, 102));
        jPanel21.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel21.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel21.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel21MouseClicked(evt);
            }
        });
        jPanel21.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 220, -1, -1));

        jPanel22.setBackground(new java.awt.Color(0, 0, 0));
        jPanel22.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel22.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel22.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel22MouseClicked(evt);
            }
        });
        jPanel22.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 220, -1, -1));

        jPanel23.setBackground(new java.awt.Color(255, 102, 102));
        jPanel23.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel23.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel23.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel23MouseClicked(evt);
            }
        });
        jPanel23.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 220, -1, -1));

        jPanel24.setBackground(new java.awt.Color(0, 0, 0));
        jPanel24.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel24.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel24.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel24MouseClicked(evt);
            }
        });
        jPanel24.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 220, -1, -1));

        jPanel25.setBackground(new java.awt.Color(0, 0, 0));
        jPanel25.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel25.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel25.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel25MouseClicked(evt);
            }
        });
        jPanel25.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 290, -1, -1));

        jPanel26.setBackground(new java.awt.Color(255, 102, 102));
        jPanel26.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel26.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel26.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel26MouseClicked(evt);
            }
        });
        jPanel26.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, -1, -1));

        jPanel27.setBackground(new java.awt.Color(0, 0, 0));
        jPanel27.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel27.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel27.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel27MouseClicked(evt);
            }
        });
        jPanel27.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 290, -1, -1));

        jPanel28.setBackground(new java.awt.Color(255, 102, 102));
        jPanel28.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel28.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel28.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel28MouseClicked(evt);
            }
        });
        jPanel28.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 290, -1, -1));

        jPanel29.setBackground(new java.awt.Color(0, 0, 0));
        jPanel29.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel29.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel29.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel29MouseClicked(evt);
            }
        });
        jPanel29.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 290, -1, -1));

        jPanel30.setBackground(new java.awt.Color(255, 102, 102));
        jPanel30.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel30.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel30.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel30MouseClicked(evt);
            }
        });
        jPanel30.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 290, -1, -1));

        jPanel31.setBackground(new java.awt.Color(0, 0, 0));
        jPanel31.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel31.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel31.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel31MouseClicked(evt);
            }
        });
        jPanel31.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 290, -1, -1));

        jPanel32.setBackground(new java.awt.Color(255, 102, 102));
        jPanel32.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel32.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel32.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel32MouseClicked(evt);
            }
        });
        jPanel32.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 290, -1, -1));

        jPanel33.setBackground(new java.awt.Color(255, 102, 102));
        jPanel33.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel33.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel33.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel33MouseClicked(evt);
            }
        });
        jPanel33.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 360, -1, -1));

        jPanel34.setBackground(new java.awt.Color(0, 0, 0));
        jPanel34.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel34.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel34.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel34MouseClicked(evt);
            }
        });
        jPanel34.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 360, -1, -1));

        jPanel35.setBackground(new java.awt.Color(255, 102, 102));
        jPanel35.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel35.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel35.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel35MouseClicked(evt);
            }
        });
        jPanel35.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 360, -1, -1));

        jPanel36.setBackground(new java.awt.Color(0, 0, 0));
        jPanel36.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel36.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel36.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel36.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel36MouseClicked(evt);
            }
        });
        jPanel36.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(622, 360, -1, -1));

        jPanel37.setBackground(new java.awt.Color(255, 102, 102));
        jPanel37.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel37.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel37.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel37.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel37MouseClicked(evt);
            }
        });
        jPanel37.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 360, -1, -1));

        jPanel38.setBackground(new java.awt.Color(0, 0, 0));
        jPanel38.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel38.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel38.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel38MouseClicked(evt);
            }
        });
        jPanel38.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(762, 360, -1, -1));

        jPanel39.setBackground(new java.awt.Color(255, 102, 102));
        jPanel39.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel39.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel39.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel39.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel39MouseClicked(evt);
            }
        });
        jPanel39.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(832, 360, -1, -1));

        jPanel40.setBackground(new java.awt.Color(0, 0, 0));
        jPanel40.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel40.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel40.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel40.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel40MouseClicked(evt);
            }
        });
        jPanel40.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 360, -1, -1));

        jPanel41.setBackground(new java.awt.Color(0, 0, 0));
        jPanel41.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel41.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel41.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel41.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel41MouseClicked(evt);
            }
        });
        jPanel41.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 430, -1, -1));

        jPanel42.setBackground(new java.awt.Color(255, 102, 102));
        jPanel42.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel42.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel42.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel42.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel42MouseClicked(evt);
            }
        });
        jPanel42.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 430, -1, -1));

        jPanel43.setBackground(new java.awt.Color(0, 0, 0));
        jPanel43.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel43.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel43.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel43.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel43MouseClicked(evt);
            }
        });
        jPanel43.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 430, -1, -1));

        jPanel44.setBackground(new java.awt.Color(255, 102, 102));
        jPanel44.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel44.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel44.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel44.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel44MouseClicked(evt);
            }
        });
        jPanel44.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(622, 430, -1, -1));

        jPanel45.setBackground(new java.awt.Color(0, 0, 0));
        jPanel45.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel45.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel45.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel45.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel45MouseClicked(evt);
            }
        });
        jPanel45.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 430, -1, -1));

        jPanel46.setBackground(new java.awt.Color(255, 102, 102));
        jPanel46.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel46.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel46.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel46.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel46MouseClicked(evt);
            }
        });
        jPanel46.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(762, 430, -1, -1));

        jPanel47.setBackground(new java.awt.Color(0, 0, 0));
        jPanel47.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel47.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel47.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel47.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel47MouseClicked(evt);
            }
        });
        jPanel47.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(832, 430, -1, -1));

        jPanel48.setBackground(new java.awt.Color(255, 102, 102));
        jPanel48.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel48.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel48.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel48.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel48MouseClicked(evt);
            }
        });
        jPanel48.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 430, -1, -1));

        jPanel49.setBackground(new java.awt.Color(255, 102, 102));
        jPanel49.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel49.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel49.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel49.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel49MouseClicked(evt);
            }
        });
        jPanel49.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 500, -1, -1));

        jPanel50.setBackground(new java.awt.Color(0, 0, 0));
        jPanel50.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel50.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel50.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel50.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel50MouseClicked(evt);
            }
        });
        jPanel50.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 500, -1, -1));

        jPanel51.setBackground(new java.awt.Color(255, 102, 102));
        jPanel51.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel51.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel51.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel51.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel51MouseClicked(evt);
            }
        });
        jPanel51.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 500, -1, -1));

        jPanel52.setBackground(new java.awt.Color(0, 0, 0));
        jPanel52.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel52.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel52.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel52.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel52MouseClicked(evt);
            }
        });
        jPanel52.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(622, 500, -1, -1));

        jPanel53.setBackground(new java.awt.Color(255, 102, 102));
        jPanel53.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel53.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel53.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel53.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel53MouseClicked(evt);
            }
        });
        jPanel53.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(692, 500, -1, -1));

        jPanel54.setBackground(new java.awt.Color(0, 0, 0));
        jPanel54.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel54.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel54.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel54.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel54MouseClicked(evt);
            }
        });
        jPanel54.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(762, 500, -1, -1));

        jPanel55.setBackground(new java.awt.Color(255, 102, 102));
        jPanel55.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel55.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel55.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel55.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel55MouseClicked(evt);
            }
        });
        jPanel55.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(832, 500, -1, -1));

        jPanel56.setBackground(new java.awt.Color(0, 0, 0));
        jPanel56.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel56.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel56.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel56.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel56MouseClicked(evt);
            }
        });
        jPanel56.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 500, -1, -1));

        jPanel57.setBackground(new java.awt.Color(0, 0, 0));
        jPanel57.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel57.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel57.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel57.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel57MouseClicked(evt);
            }
        });
        jPanel57.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 570, -1, -1));

        jPanel58.setBackground(new java.awt.Color(255, 102, 102));
        jPanel58.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel58.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel58.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel58.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel58MouseClicked(evt);
            }
        });
        jPanel58.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 570, -1, -1));

        jPanel59.setBackground(new java.awt.Color(0, 0, 0));
        jPanel59.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel59.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel59.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel59.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel59MouseClicked(evt);
            }
        });
        jPanel59.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 570, -1, -1));

        jPanel60.setBackground(new java.awt.Color(255, 102, 102));
        jPanel60.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel60.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel60.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel60.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel60MouseClicked(evt);
            }
        });
        jPanel60.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 570, -1, -1));

        jPanel61.setBackground(new java.awt.Color(0, 0, 0));
        jPanel61.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel61.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel61.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel61.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel61MouseClicked(evt);
            }
        });
        jPanel61.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 570, -1, -1));

        jPanel62.setBackground(new java.awt.Color(255, 102, 102));
        jPanel62.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel62.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel62.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel62.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel62MouseClicked(evt);
            }
        });
        jPanel62.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 570, -1, -1));

        jPanel63.setBackground(new java.awt.Color(0, 0, 0));
        jPanel63.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel63.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel63.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel63.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel63MouseClicked(evt);
            }
        });
        jPanel63.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 570, -1, -1));

        jPanel64.setBackground(new java.awt.Color(255, 102, 102));
        jPanel64.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel64.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel64.setPreferredSize(new java.awt.Dimension(64, 64));
        jPanel64.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel64MouseClicked(evt);
            }
        });
        jPanel64.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(jPanel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 570, -1, -1));

        jLabel120.setText("WHO PLAYES");
        getContentPane().add(jLabel120, new org.netbeans.lib.awtextra.AbsoluteConstraints(627, 11, -1, -1));

        jLabel1.setText("1");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 63, -1, -1));

        jLabel2.setText("2");
        jLabel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 135, -1, -1));

        jLabel3.setText("3");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 207, -1, -1));

        jLabel4.setText("4");
        jLabel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 279, -1, -1));

        jLabel5.setText("5");
        jLabel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 351, -1, -1));

        jLabel6.setText("6");
        jLabel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 423, -1, -1));

        jLabel7.setText("7");
        jLabel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 495, -1, -1));

        jLabel8.setText("8");
        jLabel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 567, -1, -1));

        jLabel9.setText("A");
        jLabel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 47, -1, -1));

        jLabel10.setText("B");
        jLabel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 47, -1, -1));

        jLabel11.setText("C");
        jLabel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(554, 47, -1, -1));

        jLabel12.setText("D");
        jLabel12.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(627, 47, -1, -1));

        jLabel13.setText("E");
        jLabel13.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(691, 47, -1, -1));

        jLabel14.setText("F");
        jLabel14.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 47, -1, -1));

        jLabel15.setText("G");
        jLabel15.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(832, 47, -1, -1));

        jLabel16.setText("H");
        jLabel16.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(914, 47, -1, -1));

        SCORE.setText("SCORE");
        SCORE.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(SCORE, new org.netbeans.lib.awtextra.AbsoluteConstraints(637, 652, -1, -1));

        jPanel65.setBackground(new java.awt.Color(255, 102, 102));
        jPanel65.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel65.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel65.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel65Layout = new javax.swing.GroupLayout(jPanel65);
        jPanel65.setLayout(jPanel65Layout);
        jPanel65Layout.setHorizontalGroup(
            jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel65Layout.setVerticalGroup(
            jPanel65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, -1, -1));

        jPanel66.setBackground(new java.awt.Color(255, 102, 102));
        jPanel66.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel66.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel66.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel66Layout = new javax.swing.GroupLayout(jPanel66);
        jPanel66.setLayout(jPanel66Layout);
        jPanel66Layout.setHorizontalGroup(
            jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel66Layout.setVerticalGroup(
            jPanel66Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, -1, -1));

        jPanel67.setBackground(new java.awt.Color(255, 102, 102));
        jPanel67.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel67.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel67.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel67Layout = new javax.swing.GroupLayout(jPanel67);
        jPanel67.setLayout(jPanel67Layout);
        jPanel67Layout.setHorizontalGroup(
            jPanel67Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel67Layout.setVerticalGroup(
            jPanel67Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, -1, -1));

        jPanel68.setBackground(new java.awt.Color(255, 102, 102));
        jPanel68.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel68.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel68.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel68Layout = new javax.swing.GroupLayout(jPanel68);
        jPanel68.setLayout(jPanel68Layout);
        jPanel68Layout.setHorizontalGroup(
            jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel68Layout.setVerticalGroup(
            jPanel68Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, -1, -1));

        jPanel69.setBackground(new java.awt.Color(255, 102, 102));
        jPanel69.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel69.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel69.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel69Layout = new javax.swing.GroupLayout(jPanel69);
        jPanel69.setLayout(jPanel69Layout);
        jPanel69Layout.setHorizontalGroup(
            jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel69Layout.setVerticalGroup(
            jPanel69Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, -1, -1));

        jPanel71.setBackground(new java.awt.Color(255, 102, 102));
        jPanel71.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel71.setMinimumSize(new java.awt.Dimension(64, 64));
        jPanel71.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel71Layout = new javax.swing.GroupLayout(jPanel71);
        jPanel71.setLayout(jPanel71Layout);
        jPanel71Layout.setHorizontalGroup(
            jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel71Layout.setVerticalGroup(
            jPanel71Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 290, -1, -1));

        jPanel70.setBackground(new java.awt.Color(255, 102, 102));
        jPanel70.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel70.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel70Layout = new javax.swing.GroupLayout(jPanel70);
        jPanel70.setLayout(jPanel70Layout);
        jPanel70Layout.setHorizontalGroup(
            jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel70Layout.setVerticalGroup(
            jPanel70Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, -1, -1));

        jPanel72.setBackground(new java.awt.Color(255, 102, 102));
        jPanel72.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel72.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel72Layout = new javax.swing.GroupLayout(jPanel72);
        jPanel72.setLayout(jPanel72Layout);
        jPanel72Layout.setHorizontalGroup(
            jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel72Layout.setVerticalGroup(
            jPanel72Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, -1, -1));

        jPanel74.setBackground(new java.awt.Color(255, 102, 102));
        jPanel74.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel74.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel74Layout = new javax.swing.GroupLayout(jPanel74);
        jPanel74.setLayout(jPanel74Layout);
        jPanel74Layout.setHorizontalGroup(
            jPanel74Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel74Layout.setVerticalGroup(
            jPanel74Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, -1, -1));

        jPanel73.setBackground(new java.awt.Color(255, 102, 102));
        jPanel73.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel73.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel73Layout = new javax.swing.GroupLayout(jPanel73);
        jPanel73.setLayout(jPanel73Layout);
        jPanel73Layout.setHorizontalGroup(
            jPanel73Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel73Layout.setVerticalGroup(
            jPanel73Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, -1, -1));

        jPanel75.setBackground(new java.awt.Color(255, 102, 102));
        jPanel75.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel75.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel75Layout = new javax.swing.GroupLayout(jPanel75);
        jPanel75.setLayout(jPanel75Layout);
        jPanel75Layout.setHorizontalGroup(
            jPanel75Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel75Layout.setVerticalGroup(
            jPanel75Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, -1, -1));

        jPanel76.setBackground(new java.awt.Color(255, 102, 102));
        jPanel76.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel76.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel76Layout = new javax.swing.GroupLayout(jPanel76);
        jPanel76.setLayout(jPanel76Layout);
        jPanel76Layout.setHorizontalGroup(
            jPanel76Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel76Layout.setVerticalGroup(
            jPanel76Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 430, -1, -1));

        jPanel77.setBackground(new java.awt.Color(255, 102, 102));
        jPanel77.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel77.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel77Layout = new javax.swing.GroupLayout(jPanel77);
        jPanel77.setLayout(jPanel77Layout);
        jPanel77Layout.setHorizontalGroup(
            jPanel77Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel77Layout.setVerticalGroup(
            jPanel77Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, -1, -1));

        jPanel78.setBackground(new java.awt.Color(255, 102, 102));
        jPanel78.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel78.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel78Layout = new javax.swing.GroupLayout(jPanel78);
        jPanel78.setLayout(jPanel78Layout);
        jPanel78Layout.setHorizontalGroup(
            jPanel78Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel78Layout.setVerticalGroup(
            jPanel78Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 500, -1, -1));

        jPanel79.setBackground(new java.awt.Color(255, 102, 102));
        jPanel79.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel79.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel79Layout = new javax.swing.GroupLayout(jPanel79);
        jPanel79.setLayout(jPanel79Layout);
        jPanel79Layout.setHorizontalGroup(
            jPanel79Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel79Layout.setVerticalGroup(
            jPanel79Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 570, -1, -1));

        jPanel89.setBackground(new java.awt.Color(255, 102, 102));
        jPanel89.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel89.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel89Layout = new javax.swing.GroupLayout(jPanel89);
        jPanel89.setLayout(jPanel89Layout);
        jPanel89Layout.setHorizontalGroup(
            jPanel89Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel89Layout.setVerticalGroup(
            jPanel89Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel89, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 360, -1, -1));

        jPanel92.setBackground(new java.awt.Color(255, 102, 102));
        jPanel92.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel92.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel92Layout = new javax.swing.GroupLayout(jPanel92);
        jPanel92.setLayout(jPanel92Layout);
        jPanel92Layout.setHorizontalGroup(
            jPanel92Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel92Layout.setVerticalGroup(
            jPanel92Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel92, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 430, -1, -1));

        jPanel85.setBackground(new java.awt.Color(255, 102, 102));
        jPanel85.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel85.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel85Layout = new javax.swing.GroupLayout(jPanel85);
        jPanel85.setLayout(jPanel85Layout);
        jPanel85Layout.setHorizontalGroup(
            jPanel85Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel85Layout.setVerticalGroup(
            jPanel85Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel85, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 220, -1, -1));

        jPanel94.setBackground(new java.awt.Color(255, 102, 102));
        jPanel94.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel94.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel94Layout = new javax.swing.GroupLayout(jPanel94);
        jPanel94.setLayout(jPanel94Layout);
        jPanel94Layout.setHorizontalGroup(
            jPanel94Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel94Layout.setVerticalGroup(
            jPanel94Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel94, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 500, -1, -1));

        jPanel81.setBackground(new java.awt.Color(255, 102, 102));
        jPanel81.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel81.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel81Layout = new javax.swing.GroupLayout(jPanel81);
        jPanel81.setLayout(jPanel81Layout);
        jPanel81Layout.setHorizontalGroup(
            jPanel81Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel81Layout.setVerticalGroup(
            jPanel81Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel81, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 80, -1, -1));

        jPanel90.setBackground(new java.awt.Color(255, 102, 102));
        jPanel90.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel90.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel90Layout = new javax.swing.GroupLayout(jPanel90);
        jPanel90.setLayout(jPanel90Layout);
        jPanel90Layout.setHorizontalGroup(
            jPanel90Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel90Layout.setVerticalGroup(
            jPanel90Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel90, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 360, -1, -1));

        jPanel86.setBackground(new java.awt.Color(255, 102, 102));
        jPanel86.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel86.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel86Layout = new javax.swing.GroupLayout(jPanel86);
        jPanel86.setLayout(jPanel86Layout);
        jPanel86Layout.setHorizontalGroup(
            jPanel86Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel86Layout.setVerticalGroup(
            jPanel86Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 220, -1, -1));

        jPanel95.setBackground(new java.awt.Color(255, 102, 102));
        jPanel95.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel95.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel95Layout = new javax.swing.GroupLayout(jPanel95);
        jPanel95.setLayout(jPanel95Layout);
        jPanel95Layout.setHorizontalGroup(
            jPanel95Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel95Layout.setVerticalGroup(
            jPanel95Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel95, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 570, -1, -1));

        jPanel83.setBackground(new java.awt.Color(255, 102, 102));
        jPanel83.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel83.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel83Layout = new javax.swing.GroupLayout(jPanel83);
        jPanel83.setLayout(jPanel83Layout);
        jPanel83Layout.setHorizontalGroup(
            jPanel83Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel83Layout.setVerticalGroup(
            jPanel83Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel83, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 150, -1, -1));

        jPanel96.setBackground(new java.awt.Color(255, 102, 102));
        jPanel96.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel96.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel96Layout = new javax.swing.GroupLayout(jPanel96);
        jPanel96.setLayout(jPanel96Layout);
        jPanel96Layout.setHorizontalGroup(
            jPanel96Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel96Layout.setVerticalGroup(
            jPanel96Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel96, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 570, -1, -1));

        jPanel84.setBackground(new java.awt.Color(255, 102, 102));
        jPanel84.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel84.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel84Layout = new javax.swing.GroupLayout(jPanel84);
        jPanel84.setLayout(jPanel84Layout);
        jPanel84Layout.setHorizontalGroup(
            jPanel84Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel84Layout.setVerticalGroup(
            jPanel84Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel84, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 150, -1, -1));

        jPanel93.setBackground(new java.awt.Color(255, 102, 102));
        jPanel93.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel93.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel93Layout = new javax.swing.GroupLayout(jPanel93);
        jPanel93.setLayout(jPanel93Layout);
        jPanel93Layout.setHorizontalGroup(
            jPanel93Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel93Layout.setVerticalGroup(
            jPanel93Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel93, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 500, -1, -1));

        jPanel91.setBackground(new java.awt.Color(255, 102, 102));
        jPanel91.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel91.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel91Layout = new javax.swing.GroupLayout(jPanel91);
        jPanel91.setLayout(jPanel91Layout);
        jPanel91Layout.setHorizontalGroup(
            jPanel91Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel91Layout.setVerticalGroup(
            jPanel91Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 430, -1, -1));

        jPanel87.setBackground(new java.awt.Color(255, 102, 102));
        jPanel87.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel87.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel87Layout = new javax.swing.GroupLayout(jPanel87);
        jPanel87.setLayout(jPanel87Layout);
        jPanel87Layout.setHorizontalGroup(
            jPanel87Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel87Layout.setVerticalGroup(
            jPanel87Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel87, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 290, -1, -1));

        jPanel82.setBackground(new java.awt.Color(255, 102, 102));
        jPanel82.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel82.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel82Layout = new javax.swing.GroupLayout(jPanel82);
        jPanel82.setLayout(jPanel82Layout);
        jPanel82Layout.setHorizontalGroup(
            jPanel82Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel82Layout.setVerticalGroup(
            jPanel82Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel82, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 80, -1, -1));

        jPanel88.setBackground(new java.awt.Color(255, 102, 102));
        jPanel88.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel88.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel88Layout = new javax.swing.GroupLayout(jPanel88);
        jPanel88.setLayout(jPanel88Layout);
        jPanel88Layout.setHorizontalGroup(
            jPanel88Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel88Layout.setVerticalGroup(
            jPanel88Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel88, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 290, -1, -1));

        jPanel80.setBackground(new java.awt.Color(255, 102, 102));
        jPanel80.setMaximumSize(new java.awt.Dimension(64, 64));
        jPanel80.setMinimumSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout jPanel80Layout = new javax.swing.GroupLayout(jPanel80);
        jPanel80.setLayout(jPanel80Layout);
        jPanel80Layout.setHorizontalGroup(
            jPanel80Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel80Layout.setVerticalGroup(
            jPanel80Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel80, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 570, -1, -1));

        jMenu1.setText("Options");

        jMenuSURRENDER.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSURRENDER.setText("SURRENDER");
        jMenuSURRENDER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSURRENDERActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSURRENDER);

        jMenuRESTART.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuRESTART.setText("RESTART");
        jMenuRESTART.setEnabled(false);
        jMenuRESTART.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRESTARTActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuRESTART);

        jMenuSCORE.setText("SCORE");
        jMenuSCORE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSCOREActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSCORE);

        jMenuUndo.setText("UNDO");
        jMenuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUndoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuUndo);

        jINFO.setText("INFO");
        jINFO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jINFOActionPerformed(evt);
            }
        });
        jMenu1.add(jINFO);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jPanel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel10MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel10MouseClicked

    private void jPanel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel15MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel15MouseClicked

    private void jPanel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel18MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel18MouseClicked

    private void jPanel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel19MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel19MouseClicked

    private void jPanel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel24MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel24MouseClicked

    private void jPanel27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel27MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel27MouseClicked

    private void jPanel31MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel31MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel31MouseClicked

    private void jPanel32MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel32MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel32MouseClicked

    private void jPanel41MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel41MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=0;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel41MouseClicked

    private void jPanel45MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel45MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel45MouseClicked

    private void jPanel47MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel47MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel47MouseClicked

    private void jPanel48MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel48MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel48MouseClicked

    private void jPanel53MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel53MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel53MouseClicked

    private void jPanel55MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel55MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel55MouseClicked

    private void jPanel56MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel56MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel56MouseClicked

    private void jPanel60MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel60MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=7;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel60MouseClicked

    private void jPanel64MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel64MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=7;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel64MouseClicked

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel5MouseClicked

    private void jPanel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel7MouseClicked

    private void jPanel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel8MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel8MouseClicked

    private void jPanel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel11MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel11MouseClicked

    private void jPanel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel12MouseClicked

    private void jPanel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel13MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel13MouseClicked

    private void jPanel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel16MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel16MouseClicked

    private void jPanel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel20MouseClicked
        // TODO add your handling code here:
         defaultColor(); 
         k=2;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel20MouseClicked

    private void jPanel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel21MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel21MouseClicked

    private void jPanel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel22MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel22MouseClicked

    private void jPanel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel23MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel23MouseClicked

    private void jPanel26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel26MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel26MouseClicked

    private void jPanel28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel28MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel28MouseClicked

    private void jPanel29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel29MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel29MouseClicked

    private void jPanel30MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel30MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel30MouseClicked

    private void jPanel33MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel33MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=0;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel33MouseClicked

    private void jPanel34MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel34MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel34MouseClicked

    private void jPanel35MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel35MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel35MouseClicked

    private void jPanel36MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel36MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel36MouseClicked

    private void jPanel37MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel37MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel37MouseClicked

    private void jPanel38MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel38MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel38MouseClicked

    private void jPanel39MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel39MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=6;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel39MouseClicked

    private void jPanel40MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel40MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=4;
         y=7;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel40MouseClicked

    private void jPanel42MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel42MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel42MouseClicked

    private void jPanel43MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel43MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel43MouseClicked

    private void jPanel44MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel44MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel44MouseClicked

    private void jPanel46MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel46MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=5;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel46MouseClicked

    private void jPanel49MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel49MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=0;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel49MouseClicked

    private void jPanel50MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel50MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel50MouseClicked

    private void jPanel51MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel51MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel51MouseClicked

    private void jPanel52MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel52MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=3;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel52MouseClicked

    private void jPanel54MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel54MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=6;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel54MouseClicked

    private void jPanel58MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel58MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=7;
         y=1;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel58MouseClicked

    private void jPanel59MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel59MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=7;
         y=2;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel59MouseClicked

    private void jPanel61MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel61MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=7;
         y=4;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel61MouseClicked

    private void jPanel62MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel62MouseClicked
        // TODO add your handling code here:
         defaultColor(); 
         k=7;
         y=5;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel62MouseClicked

    private void jPanel63MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel63MouseClicked
        // TODO add your handling code here:
        x[0][0].setBackground(Color.red);
        defaultColor(); 
        k=7;
        y=6;
        LetsMakeTheMove();
        CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel63MouseClicked

    private void jPanel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseClicked
        // TODO add your handling code here:
        defaultColor(); 
        k=1;
        y=5;
        LetsMakeTheMove();
        CheckIfKingIsAlive();
    }//GEN-LAST:event_jPanel14MouseClicked

    private void jMenuSCOREActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSCOREActionPerformed
        // TODO add your handling code here:
        jDialog1.setVisible(true);
        jDialog1.setSize(400,400);
        jDialog1.setMaximumSize(new Dimension(400,400));
    }//GEN-LAST:event_jMenuSCOREActionPerformed

    private void jMenuSURRENDERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSURRENDERActionPerformed
        // TODO add your handling code here:
        jDialog3.setVisible(true);     
    }//GEN-LAST:event_jMenuSURRENDERActionPerformed

    private void jMenuRESTARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRESTARTActionPerformed
        // TODO add your handling code here:
        WhoPlays=0;
        WhosePawn=0;
        MovesMade=0;
        IsYourPawn=0;
        BlackPoints=0;
        WhitePoints=0;
        gravePoint1=16;
        gravePoint=0;
        UndoNumber=0;
        move=false;
        WhiteKingAlive=true;
        BlackKingAlive=true;
        start();
        defaultColor();
        for(int i=2;i<6;i++)
            for(int j=0;j<8;j++)x[i][j].setIcon(null);        
        for(int i=0;i<32;i++)graveyard[i].setIcon(null);
        Disable(true);
        jMenuUndo.setEnabled(true);
        jMenuRESTART.setEnabled(false);
    }//GEN-LAST:event_jMenuRESTARTActionPerformed

    private void jINFOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jINFOActionPerformed
        // TODO add your handling code here:
        jDialog2.setVisible(true);
        jDialog2.setSize(400,400);
        jDialog2.setMaximumSize(new Dimension(400,400));
    }//GEN-LAST:event_jINFOActionPerformed

    private void jButtonYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonYesActionPerformed
        // TODO add your handling code here:
        CalculatePoints();
        if(WhoPlays==0)
        {
            WhitePoints=0;
            jLabel120.setText("THE PLAYER WITH WHITE PAWNS SURRENDERED");
        }
        else
        {
            BlackPoints=0;
            jLabel120.setText("THE PLAYER WITH BLACK PAWNS SURRENDERED");
        }
        for(int loss=0;loss<8;loss++)
        {    for(int surrender=0;surrender<8;surrender++)pionia[loss][surrender]=null;

        }
        if(WhoPlays==0)Wins1+=1;
        else Wins0+=1;

        SCORE.setText("White Pawns wins = "+Wins0+ " Black Pawns wins = "+Wins1);
        Object[] row = { WhitePoints,BlackPoints};
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(row);
        Disable(false);
        jMenuRESTART.setEnabled(true);
        jMenuUndo.setEnabled(false);
        jDialog3.setVisible(false);    
    }//GEN-LAST:event_jButtonYesActionPerformed

    private void jButtonNOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNOActionPerformed
        // TODO add your handling code here:
        jDialog3.setVisible(false);
    }//GEN-LAST:event_jButtonNOActionPerformed

    private void jMenuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuUndoActionPerformed
        // TODO add your handling code here:
        if(UndoNumber>0){
            UndoNumber-=1;
            WhoPlays=Undo[UndoNumber].getWhoPlays1();
            if(Undo[UndoNumber].getCasting())
            {
                if(Undo[UndoNumber].getBB()-Undo[UndoNumber].getDD()>0)
                {
                    if(Undo[UndoNumber].getWhoPlays1()==0)
                    {
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1].setIcon(whTOWER);
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1].setIcon(null);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1]=new pawns(WhoPlays,2);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1]=null;
                      
                    }
                    if(Undo[UndoNumber].getWhoPlays1()==1)
                    {
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1].setIcon(blTOWER);  
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1].setIcon(null);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1]=new pawns(WhoPlays,2);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1]=null;
                    }
                }
                if(Undo[UndoNumber].getBB()-Undo[UndoNumber].getDD()<0)
                {
                    if(Undo[UndoNumber].getWhoPlays1()==0)
                    {
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1].setIcon(whTOWER);
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1].setIcon(null);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1]=new pawns(WhoPlays,2);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1]=null;
                    }
                    if(Undo[UndoNumber].getWhoPlays1()==1)
                    {
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1].setIcon(blTOWER);  
                      x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1].setIcon(null);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()+1]=new pawns(WhoPlays,2);
                      pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()-1]=null;
                    }
                }
            }
            if(WhoPlays==0)jLabel120.setText("White Pawns are playing");
            else jLabel120.setText("Black Pawns are playing");
            x[Undo[UndoNumber].getAA()][Undo[UndoNumber].getBB()].setIcon(Undo[UndoNumber].getKK());
            x[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()].setIcon(Undo[UndoNumber].getXX());
            pionia[Undo[UndoNumber].getAA()][Undo[UndoNumber].getBB()]=Undo[UndoNumber].getZZ();
            pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()]=Undo[UndoNumber].getQQ();
            
            if(pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()]!=null)
            {
                if(pionia[Undo[UndoNumber].getCC()][Undo[UndoNumber].getDD()].getPlayer()==0)
                {   
                    gravePoint-=1;
                    graveyard[gravePoint].setIcon(null);
                }
                else
                {
                    gravePoint1-=1;
                    graveyard[gravePoint1].setIcon(null);
                }
            }
            
         }
    }//GEN-LAST:event_jMenuUndoActionPerformed

private void jPanel57MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel57MouseClicked
        // TODO add your handling code here:
         defaultColor(); 
         k=7;
         y=0;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
}//GEN-LAST:event_jPanel57MouseClicked

private void jPanel25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel25MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=3;
         y=0;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
}//GEN-LAST:event_jPanel25MouseClicked

private void jPanel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel17MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=2;
         y=0;
        LetsMakeTheMove();
        CheckIfKingIsAlive();
}//GEN-LAST:event_jPanel17MouseClicked

private void jPanel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel9MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=1;
         y=0;
         LetsMakeTheMove(); 
         CheckIfKingIsAlive();
}//GEN-LAST:event_jPanel9MouseClicked

private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
         defaultColor();
         k=0;
         y=0;
         LetsMakeTheMove();
         CheckIfKingIsAlive();
}//GEN-LAST:event_jPanel1MouseClicked

    /**
     * @param args the command line arguments
     */
    ImageIcon blPAWN=new ImageIcon("./src/Black Pawn.png"); 
    ImageIcon blTOWER=new ImageIcon("./src/Black Tower.png");
    ImageIcon blHORSE=new ImageIcon("./src/Black Horse.png");
    ImageIcon blBISHOP=new ImageIcon("./src/Black Bishop.png");
    ImageIcon blQUEEN=new ImageIcon("./src/Black Queen.png");
    ImageIcon blKING=new ImageIcon("./src/Black King.png");
    
    ImageIcon whPAWN=new ImageIcon("./src/White Pawn.png");
    ImageIcon whTOWER=new ImageIcon("./src/White Tower.png");
    ImageIcon whHORSE=new ImageIcon("./src/White Horse.png");
    ImageIcon whBISHOP=new ImageIcon("./src/White Bishop.png");
    ImageIcon whQUEEN=new ImageIcon("./src/White Queen.png");
    ImageIcon whKING=new ImageIcon("./src/White King.png");
    
    Icon willMove; //h eikona pou 8a metakinh8ei
    int WhoPlays=0; //poios paixtis paizei 0 gia aspra 1 gia maura
    int WhosePawn=0; //poianou pioni 
    int MovesMade=0;//poses kinhseis exei kanei <=1!!!
    int Wins0=0;
    int Wins1=0; 
    int a,b; //theseis tis eikonas kai tou pioniou(an uparxoun)pou tha diagrafei afou ginei metakinhsh toy pioniou
    int IsYourPawn=0;
    int WhitePoints=0;
    int BlackPoints=0;
    int UndoNumber=0; 
    int k,y; //9esi x kai y se kathe label
    int gravePoint=0;
    int gravePoint1=16;
    Boolean WhereCanMove[][]=new Boolean[8][8];
    boolean move=false;//An 8elei o xrhsths na ginei metakinhsh
    boolean WhiteKingAlive=true;
    boolean BlackKingAlive=true;
    boolean elegxos=true;//elegxos an mporei na ginei metakinhsh
    boolean elegxos1=true;//elegxos an mporei na ginei metakinhsh
    JLabel x[][]=new JLabel[8][8]; //emfanisi eikonon
    JLabel[] graveyard=new JLabel[32];
    history Undo[]=new history[20];
    
    pawns[][] pionia=new pawns[8][8]; //pinakas me antikeimena (pawns) kai idiotites tous
    
    class history
    {
        int WhoPlays1;
        int aa,bb,cc,dd; // aa-bb(suntetagmenes tis ikonas pou 8a metakih8ei) cc-dd(suntetagmenes pou phge)
        Icon kk;
        Icon xx;
        pawns zz;
        pawns qq;
        boolean casting;
        
        history(int w,int aa,int bb,int cc,int dd,Icon kk,Icon xx,pawns zz,pawns qq,boolean c)
        {
            WhoPlays1=w;
            this.aa=aa;
            this.bb=bb;
            this.cc=cc;
            this.dd=dd;
            this.kk=kk;
            this.xx=xx;
            this.zz=zz;
            this.qq=qq;
            casting=c;
        }
       int getWhoPlays1()
       {
           return WhoPlays1;
       }
       int getAA()
       {
           return aa;
       }
       int getBB()
       {
           return bb;
       }
       int getCC()
       {
           return cc;
       }
       int getDD()
       {
           return dd;
       }
       Icon getKK()
       {
           return kk;
       }
       Icon getXX()
       {
           return xx;
       }
       pawns getZZ()
       {
           return zz;
       }
       pawns getQQ()
       {
           return qq;
       }
       boolean getCasting()
       {
           return casting;
       }
       public void setCasting(boolean c)
       {
           casting=c;
       }       
       
    }
    class pawns
    {
     private int player; //poios paixtis paizei
     private int typos;  //0 for pawn 1 for horse 2 for tower 3 for bishop 4 for queen 5 for king
     
     pawns(int c,int t) //Ola ta pionia kathe typou
     {
         player=c;
         typos=t;
     }
        
        public int getPlayer()
        {
              return player;   
        }
        public int getTypos()
        {
            return typos;
        }
        
        public void setPlayer(int p)        
        {
          player=p;
        }
        public void setNullOrNot(int t)
        {
             typos=t;
        }
    }
    
    private void Disable(boolean f)
    {   
        for(int i=0;i<8;i++)
                 for(int j=0;j<8;j++)x[i][j].setEnabled(f);
        
        jPanel1.setEnabled(f);
        jPanel2.setEnabled(f);
        jPanel3.setEnabled(f);
        jPanel4.setEnabled(f);
        jPanel5.setEnabled(f);
        jPanel6.setEnabled(f);
        jPanel7.setEnabled(f);
        jPanel8.setEnabled(f);
        jPanel9.setEnabled(f);
        jPanel10.setEnabled(f);
        jPanel11.setEnabled(f);
        jPanel12.setEnabled(f);
        jPanel13.setEnabled(f);
        jPanel14.setEnabled(f);
        jPanel15.setEnabled(f);
        jPanel16.setEnabled(f);
        jPanel17.setEnabled(f);
        jPanel18.setEnabled(f);
        jPanel19.setEnabled(f);
        jPanel20.setEnabled(f);
        jPanel21.setEnabled(f);
        jPanel22.setEnabled(f);
        jPanel23.setEnabled(f);
        jPanel24.setEnabled(f);
        jPanel25.setEnabled(f);
        jPanel26.setEnabled(f);
        jPanel27.setEnabled(f);
        jPanel28.setEnabled(f);
        jPanel29.setEnabled(f);
        jPanel30.setEnabled(f);
        jPanel31.setEnabled(f);
        jPanel32.setEnabled(f);
        jPanel33.setEnabled(f);
        jPanel34.setEnabled(f);
        jPanel35.setEnabled(f);
        jPanel36.setEnabled(f);
        jPanel37.setEnabled(f);
        jPanel38.setEnabled(f);
        jPanel39.setEnabled(f);
        jPanel40.setEnabled(f);
        jPanel41.setEnabled(f);
        jPanel42.setEnabled(f);
        jPanel43.setEnabled(f);
        jPanel44.setEnabled(f);
        jPanel45.setEnabled(f);
        jPanel46.setEnabled(f);
        jPanel47.setEnabled(f);
        jPanel48.setEnabled(f);
        jPanel49.setEnabled(f);
        jPanel50.setEnabled(f);
        jPanel51.setEnabled(f);
        jPanel52.setEnabled(f);
        jPanel53.setEnabled(f);
        jPanel54.setEnabled(f);
        jPanel55.setEnabled(f);
        jPanel56.setEnabled(f);
        jPanel57.setEnabled(f);
        jPanel58.setEnabled(f);
        jPanel59.setEnabled(f);
        jPanel60.setEnabled(f);
        jPanel61.setEnabled(f);
        jPanel62.setEnabled(f);
        jPanel63.setEnabled(f);
        jPanel64.setEnabled(f);
    }
    private void CalculatePoints()
    {
        for(int i=0;i<8;i++)
        {
            for(int j=0;j<8;j++)
            {   if(pionia[i][j]!=null)
                {
                    if(pionia[i][j].getTypos()==0)
                    {
                        if(pionia[i][j].getPlayer()==0)
                        {
                            WhitePoints+=5;
                        }
                        else
                        {
                            BlackPoints+=5;  
                        }
                    }
                    if(pionia[i][j].getTypos()==1)
                    {
                        if(pionia[i][j].getPlayer()==0)
                        {
                             WhitePoints+=30;
                        }
                        else
                        {
                             BlackPoints+=30;    
                        }
                    }
                    if(pionia[i][j].getTypos()==2)
                    {
                        if(pionia[i][j].getPlayer()==0)
                        {
                            WhitePoints+=50;
                        }
                        else
                        {
                            BlackPoints+=50;    
                        }
                    }
                    if(pionia[i][j].getTypos()==3)
                    {
                        if(pionia[i][j].getPlayer()==0)
                        {
                             WhitePoints+=50;
                        }
                        else
                        {
                             BlackPoints+=50;     
                        }
                    }
                    if(pionia[i][j].getTypos()==4)
                    {
                        if(pionia[i][j].getPlayer()==0)
                        {
                            WhitePoints+=200;
                        }
                        else
                        {
                            BlackPoints+=200;     
                        }
                    }
                    if(pionia[i][j].getTypos()==5)
                    {
                        if(pionia[i][j].getPlayer()==0)
                        {
                             WhitePoints+=500;
                        }
                        else
                        {
                            BlackPoints+=500;     
                        }
                    }
                }
            }
        }
    }
    private void SpecialMoves()
    {
        if(pionia[k][y]!=null)
        {
            if(pionia[k][y].getTypos()==0)
            {
                if(pionia[k][y].getPlayer()==1)
                {
                    x[k][y].setIcon(null);
                    x[k][y].setIcon(blQUEEN);
                    pionia[k][y]=new pawns(1,4);
                }
                else if(pionia[k][y].getPlayer()==0)
                {
                    x[k][y].setIcon(null);
                    x[k][y].setIcon(whQUEEN);
                    pionia[k][y]=new pawns(0,4);
                }
            
        
              if(k<7&&y<7)
              {
                if(pionia[k+1][y+1]!=null&&pionia[k+1][y+1].getPlayer()!=WhoPlays)
                {
                    x[a][b].setIcon(null);
                    x[k][y].setIcon(null);
                    x[k][y].setIcon(willMove);
                    pionia[k][y]=pionia[a][b];
                    pionia[a][b]=null;
                }
                if(pionia[k+1][y+1]!=null&&pionia[k+1][y+1].getPlayer()!=WhoPlays)
                {
                    x[a][b].setIcon(null);
                    x[k][y].setIcon(null);
                    x[k][y].setIcon(willMove);
                    pionia[k][y]=pionia[a][b];
                    pionia[a][b]=null;
                }
              }
            }
          
            if(pionia[k][y].getTypos()==5)
            {
                if((Undo[UndoNumber-2].getZZ().getTypos()!=5&&Undo[UndoNumber-2].getZZ().getTypos()!=2))
                {
                   if(y<5)
                   {
                        if(pionia[k][y+2]==null&&pionia[k][y+1]==null&&pionia[k][y+3].getTypos()==2)
                        {
                            WhereCanMove[k][y+2]=true;
                            x[k][y+2].setBackground(Color.red);
                        }
                   }
                   if(y>3)
                   {
                        if(pionia[k][y-1]==null&&pionia[k][y-2]==null&&pionia[k][y-3].getTypos()==2)
                        {
                            WhereCanMove[k][y-2]=true;
                            x[k][y-2].setBackground(Color.red);
                        } 
                    }
                }
             }
           
        }
        
    }
    private void LetsMakeTheMove()
    {   
        if(MovesMade==0)
        {          
            if(pionia[k][y]==null)
            {   
                WhosePawn=WhoPlays;
                IsYourPawn+=2;
            }
            else
            {                                 
                IsYourPawn=pionia[k][y].getPlayer();
                WhosePawn=pionia[k][y].getPlayer();
            }
        
          
            if(move==true&&(a!=k||b!=y)&&WhereCanMove[k][y]&&IsYourPawn!=WhoPlays)
            {   
                willMove=x[a][b].getIcon();
                if(UndoNumber==19)
                {
                    for(int i=0;i<Undo.length-1;i++)
                    {
                        Undo[i]=Undo[i+1];
                    }
                }
                if(pionia[k][y]==null)Undo[UndoNumber]=new history(WhoPlays,a,b,k,y,willMove,null,pionia[a][b],null,false);
                else Undo[UndoNumber]=new history(WhoPlays,a,b,k,y,willMove,x[k][y].getIcon(),pionia[a][b],pionia[k][y],false);
                
                if(pionia[a][b].getTypos()==5&&Math.abs(y-b)==2)
                {
                    if(y-b>0)
                    {   x[k][y-1].setIcon(x[k][y+1].getIcon());
                        x[k][y+1].setIcon(null);
                        pionia[k][y-1]=pionia[k][y+1];
                        pionia[k][y+1]=null;
                        Undo[UndoNumber].setCasting(true);
                        
                    }
                    if(y-b<0)
                    {
                        x[k][y+1].setIcon(x[k][y-1].getIcon());
                        x[k][y-1].setIcon(null);
                        pionia[k][y+1]=pionia[k][y-1];
                        pionia[k][y-1]=null;
                        Undo[UndoNumber].setCasting(true);
                    }                       
                }
                
                if(UndoNumber<19)UndoNumber+=1;
                
                if(pionia[k][y]!=null){
                    if(pionia[k][y].getPlayer()==0){
                        graveyard[gravePoint].setIcon(x[k][y].getIcon());
                        gravePoint+=1;
                    }
                    else{
                        graveyard[gravePoint1].setIcon(x[k][y].getIcon());
                        gravePoint1+=1;
                    }
                    
                }
                
                x[a][b].setIcon(null);
                x[k][y].setIcon(null);
                x[k][y].setIcon(willMove);
                pionia[k][y]=pionia[a][b];
                pionia[a][b]=null;
                move=false;
                MovesMade+=1;
                
            }
            else if(WhoPlays==WhosePawn&&move==false)
            {    if(pionia[k][y]!=null)
                 {
                    a=k;
                    b=y;
                    CanMove(k,y);
                    move=true;                    
                 }
            }
            else if(move==true&&a==k&&b==y)
            {
                
                move=false;
            }
            else if(pionia[k][y]!=null)
            {
                if(pionia[k][y].getPlayer()==WhoPlays&&move==true&&pionia[k][y].getPlayer()==WhosePawn)
                {   a=k;
                    b=y;
                    CanMove(k,y);
                    move=true;
                }
            }
            else if(pionia[k][y]==null&&WhereCanMove[k][y]==false&&move==true)move=false;
        }
             
        if(MovesMade!=0)
        {
            if(WhoPlays==0)
            {   
                WhoPlays=1;
            }
            else
            {  
                WhoPlays=0;
            }
            MovesMade=0;
            if(WhoPlays==0)
            jLabel120.setText("White Pawns are playing");
            else jLabel120.setText("Black Pawns are playing");
        }
    }
    private void CheckIfKingIsAlive()
    {
        WhiteKingAlive=false;
        BlackKingAlive=false;
        for(int i=0;i<8; i++)
        {
            for(int j=0;j<8;j++)
            {   if(pionia[i][j]!=null)
                {
                    if(pionia[i][j].getTypos()==5&&pionia[i][j].getPlayer()==0)WhiteKingAlive=true;
                    if(pionia[i][j].getTypos()==5&&pionia[i][j].getPlayer()==1)BlackKingAlive=true;                    
                }
            }
        }
        if(!WhiteKingAlive&&jPanel1.isEnabled())
        {            Wins1+=1;
            SCORE.setText("White Pawns win = "+Wins0+ " Black Pawns win = "+Wins1);
            jLabel120.setText("Black Pawns win");
            CalculatePoints();
            for(int loss=0;loss<8;loss++)
            {   
                for(int surrender=0;surrender<8;surrender++)pionia[loss][surrender]=null;
            }
            Object[] row = { WhitePoints,BlackPoints};
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.addRow(row);
            Disable(false);
            jMenuUndo.setEnabled(false);
            jMenuRESTART.setEnabled(true);
        }
        if(!BlackKingAlive&&jPanel1.isEnabled())
        {
            Wins0+=1;
            SCORE.setText("White Pawns win = "+Wins0+ " Black Pawns win = "+Wins1);
            jLabel120.setText("White Pawns win");
            CalculatePoints();
            for(int loss=0;loss<8;loss++)
            {   
                for(int surrender=0;surrender<8;surrender++)pionia[loss][surrender]=null;
            }
            Object[] row = { WhitePoints,BlackPoints};
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.addRow(row);
            Disable(false);
            jMenuUndo.setEnabled(false);
            jMenuRESTART.setEnabled(true);            
        }
    }
    
    private void CanMove(int k,int y)
    {           
                for(int i=0;i<8;i++)
                {
                    for(int j=0;j<8;j++)WhereCanMove[i][j]=false;
                }
                
        if(pionia[k][y].getTypos()==0) //PAWNS
        {            
                
                if(pionia[k][y].getPlayer()==1)
                {   
                    if(k<7&&y<7)
                    {
                        if(pionia[k+1][y+1]!=null)
                        {
                            if(pionia[k+1][y+1].getPlayer()!=WhoPlays)
                            {
                                WhereCanMove[k+1][y+1]=true;
                                x[k+1][y+1].setBackground(Color.red);
                            }
                        }
                    }
                    if(k<7&&y>0)
                    {
                        if(pionia[k+1][y-1]!=null)
                        {
                            if(pionia[k+1][y-1].getPlayer()!=WhoPlays)
                            {
                                WhereCanMove[k+1][y-1]=true;
                                x[k+1][y-1].setBackground(Color.red);
                            }
                        }
                    }
                    
                    if(k==7)
                    {
                        SpecialMoves();
                    }
                    else{
                           if(k<7)
                           {
                                if(pionia[k+1][y]==null)
                                {    
                                    x[k+1][y].setBackground(Color.red);
                                    WhereCanMove[k+1][y]=true;
                                    if(k==1&&pionia[k+1][y]==null) 
                                    {
                                        x[k+2][y].setBackground(Color.red);
                                        WhereCanMove[k+2][y]=true;
                                    }
                                }
                            }
                        }
                }
                     
                else if(pionia[k][y].getPlayer()==0)
                {   if(k>0&&y<7)
                    {
                        if(pionia[k-1][y+1]!=null)
                        {
                            if(pionia[k-1][y+1].getPlayer()!=WhoPlays)
                            {
                                WhereCanMove[k-1][y+1]=true;
                                x[k-1][y+1].setBackground(Color.red);
                            }
                        }
                    }
                        if(k>0&&y>0)
                        {
                            if(pionia[k-1][y-1]!=null)
                            {       if(pionia[k-1][y-1].getPlayer()!=WhoPlays)
                                {
                                    WhereCanMove[k-1][y-1]=true;
                                    x[k-1][y-1].setBackground(Color.red);
                                }
                            }
                        }
                    if(k==0)
                    {
                       SpecialMoves();
                    }
                    else
                    {
                      if(k>0)
                      {
                        if(pionia[k-1][y]==null)
                        {   x[k-1][y].setBackground(Color.red);
                            WhereCanMove[k-1][y]=true;
                            if(k==6&&pionia[k-1][y]==null)
                            {   WhereCanMove[k-2][y]=true;
                                x[k-2][y].setBackground(Color.red);
                            }
                        }
                    
                      }
                    }
                }
        }
        
        else if(pionia[k][y].getTypos()==1) //HORSES
        {
                if(k<6)
                {
                    if(y!=7)
                    {   x[k+2][y+1].setBackground(Color.red);
                        WhereCanMove[k+2][y+1]=true;
                    }
                    if(y!=0)
                    {   WhereCanMove[k+2][y-1]=true;
                        x[k+2][y-1].setBackground(Color.red);
                    }
                }
                if(k>1)
                {
                   if(y!=7)
                   {   WhereCanMove[k-2][y+1]=true;
                       x[k-2][y+1].setBackground(Color.red);
                   }
                   if(y!=0)
                   {   WhereCanMove[k-2][y-1]=true;     
                       x[k-2][y-1].setBackground(Color.red);
                   }
                }
           
         
                if(y<6)
                {
                     if(k!=0)
                     {   WhereCanMove[k-1][y+2]=true;
                         x[k-1][y+2].setBackground(Color.red);
                     }
                     if(k!=7)
                     {   WhereCanMove[k+1][y+2]=true;   
                         x[k+1][y+2].setBackground(Color.red);
                     }
                }    
               if(y>1)
               {   if(k!=0)
                   {   WhereCanMove[k-1][y-2]=true; 
                       x[k-1][y-2].setBackground(Color.red);
                   }
                   if(k!=7)
                   {   WhereCanMove[k+1][y-2]=true; 
                       x[k+1][y-2].setBackground(Color.red);
                   } 
               }
                   
        }
           
        else if(pionia[k][y].getTypos()==2) //TOWERS
        {
            elegxos=true;
            elegxos1=true;
            for(int apostasi=k+1;apostasi<8;apostasi++)
            {   
                    if(pionia[apostasi][y]!=null)
                    {    elegxos=false;
                         if(pionia[apostasi][y].getPlayer()==WhoPlays)elegxos1=false;
                    }
                    if(elegxos||elegxos1)
                    {
                        WhereCanMove[apostasi][y]=true;
                        x[apostasi][y].setBackground(Color.red);
                    }
                    if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
                                    
            }
            elegxos=true;
            elegxos1=true;
            for(int apostasi=k-1;apostasi>=0;apostasi--)
            {
                if(pionia[apostasi][y]!=null)
                    {    elegxos=false;
                         if(pionia[apostasi][y].getPlayer()==WhoPlays)elegxos1=false;
                    }
                if(elegxos||elegxos1)
                {   WhereCanMove[apostasi][y]=true;
                    x[apostasi][y].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
            }
            elegxos=true;
            elegxos1=true;
            for(int apostasi=y+1;apostasi<8;apostasi++)
            {
                if(pionia[k][apostasi]!=null)
                    {    elegxos=false;
                         if(pionia[k][apostasi].getPlayer()==WhoPlays)elegxos1=false;
                    }
                if(elegxos||elegxos1)
                {   WhereCanMove[k][apostasi]=true;
                    x[k][apostasi].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
            }
            elegxos=true;
            elegxos1=true;
            for(int apostasi=y-1;apostasi>=0;apostasi--)
            {
                if(pionia[k][apostasi]!=null)
                    {    elegxos=false;
                         if(pionia[k][apostasi].getPlayer()==WhoPlays)elegxos1=false;
                    }
                if(elegxos||elegxos1)
                {
                    WhereCanMove[k][apostasi]=true;
                    x[k][apostasi].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
            }
                
        }
        else if(pionia[k][y].getTypos()==3) //Bishops
        {
            int x2=k; 
            int y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2>0&&y2>0)
            { 
                x2-=1;
                y2-=1;
                if(pionia[x2][y2]!=null)
                {
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                }
                if(elegxos||elegxos1)
                {
                    WhereCanMove[x2][y2]=true;
                    x[x2][y2].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                {
                    elegxos1=false;
                }
            }
            x2=k;
            y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2>0&&y2<7)
            {
                x2-=1;
                y2+=1;
                if(pionia[x2][y2]!=null)
                {
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                }
                if(elegxos||elegxos1)
                {
                    x[x2][y2].setBackground(Color.red);
                    WhereCanMove[x2][y2]=true;
                }
                if(elegxos==false&&elegxos1==true)
                {
                    elegxos1=false;
                }
            }
            x2=k;
            y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2<7&&y2<7)
            {    x2+=1;
                 y2+=1;
                 if(pionia[x2][y2]!=null)
                 {
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                 }
                 if(elegxos||elegxos1)
                 {
                     x[x2][y2].setBackground(Color.red);
                     WhereCanMove[x2][y2]=true;
                 }
                 if(elegxos==false&&elegxos1==true)
                 {
                    elegxos1=false;
                 }
            }
            x2=k;
            y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2<7&&y2>0)
            {    x2+=1;
                 y2-=1;
                 if(pionia[x2][y2]!=null)
                 { 
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                 }
                 if(elegxos||elegxos1)
                 {
                     x[x2][y2].setBackground(Color.red);
                     WhereCanMove[x2][y2]=true;
                 }
                 if(elegxos==false&&elegxos1==true)
                 {
                    elegxos1=false;
                 }
            }
        }
        else if(pionia[k][y].getTypos()==4) //Queens
        {
            int x2=k;  //Queens move like a bishop
            int y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2>0&&y2>0)
            { 
                x2-=1;
                y2-=1;
                if(pionia[x2][y2]!=null)
                {
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                }
                if(elegxos||elegxos1)
                {
                    WhereCanMove[x2][y2]=true;
                    x[x2][y2].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                {
                    elegxos1=false;
                }
            }
            x2=k;
            y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2>0&&y2<7)
            {
                x2-=1;
                y2+=1;
                if(pionia[x2][y2]!=null)
                {
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                }
                if(elegxos||elegxos1)
                {
                    x[x2][y2].setBackground(Color.red);
                    WhereCanMove[x2][y2]=true;
                }
                if(elegxos==false&&elegxos1==true)
                {
                    elegxos1=false;
                }
            }
            x2=k;
            y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2<7&&y2<7)
            {    x2+=1;
                 y2+=1;
                 if(pionia[x2][y2]!=null)
                 {
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                 }
                 if(elegxos||elegxos1)
                 {
                     x[x2][y2].setBackground(Color.red);
                     WhereCanMove[x2][y2]=true;
                 }
                 if(elegxos==false&&elegxos1==true)
                 {
                    elegxos1=false;
                 }
            }
            x2=k;
            y2=y;
            elegxos=true;
            elegxos1=true;
            while(x2<7&&y2>0)
            {    x2+=1;
                 y2-=1;
                 if(pionia[x2][y2]!=null)
                 { 
                    elegxos=false;
                    if(pionia[x2][y2].getPlayer()==WhoPlays)elegxos1=false;
                 }
                 if(elegxos||elegxos1)
                 {
                     x[x2][y2].setBackground(Color.red);
                     WhereCanMove[x2][y2]=true;
                 }
                 if(elegxos==false&&elegxos1==true)
                 {
                    elegxos1=false;
                 }
            }
       
            elegxos=true;
            elegxos1=true;                  //queens move lika a tower
            for(int apostasi=k+1;apostasi<8;apostasi++)
            {   
                    if(pionia[apostasi][y]!=null)
                    {    elegxos=false;
                         if(pionia[apostasi][y].getPlayer()==WhoPlays)elegxos1=false;
                    }
                    if(elegxos||elegxos1)
                    {
                        WhereCanMove[apostasi][y]=true;
                        x[apostasi][y].setBackground(Color.red);
                    }
                    if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
                                    
            }
            elegxos=true;
            elegxos1=true;
            for(int apostasi=k-1;apostasi>=0;apostasi--)
            {
                if(pionia[apostasi][y]!=null)
                    {    elegxos=false;
                         if(pionia[apostasi][y].getPlayer()==WhoPlays)elegxos1=false;
                    }
                if(elegxos||elegxos1)
                {   WhereCanMove[apostasi][y]=true;
                    x[apostasi][y].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
            }
            elegxos=true;
            elegxos1=true;
            for(int apostasi=y+1;apostasi<8;apostasi++)
            {
                if(pionia[k][apostasi]!=null)
                    {    elegxos=false;
                         if(pionia[k][apostasi].getPlayer()==WhoPlays)elegxos1=false;
                    }
                if(elegxos||elegxos1)
                {   WhereCanMove[k][apostasi]=true;
                    x[k][apostasi].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
            }
            elegxos=true;
            elegxos1=true;
            for(int apostasi=y-1;apostasi>=0;apostasi--)
            {
                if(pionia[k][apostasi]!=null)
                    {    elegxos=false;
                         if(pionia[k][apostasi].getPlayer()==WhoPlays)elegxos1=false;
                    }
                if(elegxos||elegxos1)
                {
                    WhereCanMove[k][apostasi]=true;
                    x[k][apostasi].setBackground(Color.red);
                }
                if(elegxos==false&&elegxos1==true)
                    {
                        elegxos1=false;
                    }
            }
        }
        else if(pionia[k][y].getTypos()==5) //Kings
        {
            if(UndoNumber>1)SpecialMoves();
            if(k!=0)
            {   WhereCanMove[k-1][y]=true;
               x[k-1][y].setBackground(Color.red);
               if(y!=7)
               {   WhereCanMove[k-1][y+1]=true; 
                   x[k-1][y+1].setBackground(Color.red);
               }
               if(y!=0)
               {   WhereCanMove[k-1][y-1]=true; 
                   x[k-1][y-1].setBackground(Color.red);
               }
            }   
            if(k!=7)
            {      WhereCanMove[k+1][y]=true; 
                   x[k+1][y].setBackground(Color.red);
                   if(y!=7)
                   {    WhereCanMove[k+1][y+1]=true;
                       x[k+1][y+1].setBackground(Color.red);
                   }
                   if(y!=0)
                   {   WhereCanMove[k+1][y-1]=true; 
                       x[k+1][y-1].setBackground(Color.red);
                   }
            }
                    
            if(y!=0)
            {   WhereCanMove[k][y-1]=true;
                x[k][y-1].setBackground(Color.red);
            }
            if(y!=7)
            {   WhereCanMove[k][y+1]=true;
                x[k][y+1].setBackground(Color.red);
            }
        }
        
         
    }
    private void defaultColor()
    {
         int k1=0;
     for(int i=0;i<8;i++)
     {
         for(int j=0;j<8;j++)
         {   
             if(k1%2==0)
             {
                 x[i][j].setBackground(Color.white);
             }
             else 
             {
                 x[i][j].setBackground(Color.black);
             }
             k1+=1;
         }
         k1+=1;
     }
    }
    private void start()
    {   for(int i=0;i<8;i++)
            for(int j=0;j<8;j++)WhereCanMove[i][j]=false;
        
        pionia[0][0]=new pawns(1,2); //black tower
        pionia[0][7]=new pawns(1,2); //black tower
        pionia[7][0]=new pawns(0,2); //white tower
        pionia[7][7]=new pawns(0,2); //white tower
        
        pionia[0][1]=new pawns(1,1); //black horse
        pionia[0][6]=new pawns(1,1); //black horse
        pionia[7][1]=new pawns(0,1); //white horse
        pionia[7][6]=new pawns(0,1); //white horse
        
        pionia[0][2]=new pawns(1,3); //black bishop
        pionia[0][5]=new pawns(1,3); //black bishop
        pionia[7][2]=new pawns(0,3); //white bishop
        pionia[7][5]=new pawns(0,3); //white bishop
        
        pionia[0][4]=new pawns(1,5); //black king
        pionia[7][4]=new pawns(0,5); //white king
        
        pionia[0][3]=new pawns(1,4); //black queen
        pionia[7][3]=new pawns(0,4); //white queen
        
        pionia[1][0]=new pawns(1,0); //black pawn
        pionia[1][1]=new pawns(1,0);
        pionia[1][2]=new pawns(1,0);
        pionia[1][3]=new pawns(1,0);
        pionia[1][4]=new pawns(1,0);
        pionia[1][5]=new pawns(1,0);
        pionia[1][6]=new pawns(1,0);
        pionia[1][7]=new pawns(1,0);
        
        pionia[6][0]=new pawns(0,0); //white pawn
        pionia[6][1]=new pawns(0,0);
        pionia[6][2]=new pawns(0,0);
        pionia[6][3]=new pawns(0,0);
        pionia[6][4]=new pawns(0,0);
        pionia[6][5]=new pawns(0,0);
        pionia[6][6]=new pawns(0,0);
        pionia[6][7]=new pawns(0,0);
        
        x[1][0].setIcon(blPAWN);
        x[6][0].setIcon(whPAWN);
        x[1][1].setIcon(blPAWN);
        x[6][1].setIcon(whPAWN);
        x[1][2].setIcon(blPAWN);
        x[6][2].setIcon(whPAWN);
        x[1][3].setIcon(blPAWN);
        x[6][3].setIcon(whPAWN); //Ppwns
        x[1][4].setIcon(blPAWN);
        x[6][4].setIcon(whPAWN);
        x[1][5].setIcon(blPAWN);
        x[6][5].setIcon(whPAWN);
        x[1][6].setIcon(blPAWN);
        x[6][6].setIcon(whPAWN);
        x[1][7].setIcon(blPAWN);
        x[6][7].setIcon(whPAWN);
        
        x[0][1].setIcon(blHORSE);
        x[7][1].setIcon(whHORSE); //horses
        x[0][6].setIcon(blHORSE);
        x[7][6].setIcon(whHORSE);
        
        x[0][0].setIcon(blTOWER);
        x[7][0].setIcon(whTOWER);
        x[0][7].setIcon(blTOWER); //towers
        x[7][7].setIcon(whTOWER);
        
        x[0][2].setIcon(blBISHOP);
        x[7][2].setIcon(whBISHOP);
        x[0][5].setIcon(blBISHOP); //bishops
        x[7][5].setIcon(whBISHOP);
        
        x[0][4].setIcon(blKING); //kings
        x[7][4].setIcon(whKING);
        
        x[0][3].setIcon(blQUEEN); //queens
        x[7][3].setIcon(whQUEEN);
        
    }
    private void start1()
 {
     int k23=0;
     for(int i=0;i<8;i++)
     {
         for(int j=0;j<8;j++)
         {   x[i][j]=new JLabel("");
             
             x[i][j].setSize(64,64);
             x[i][j].setMinimumSize(new java.awt.Dimension(64, 64));
             x[i][j].setMaximumSize(new java.awt.Dimension(64, 64));
             x[i][j].setPreferredSize(new java.awt.Dimension(64, 64));
             x[i][j].setOpaque(true);
             
             if(k23%2==0)
             {
                 x[i][j].setBackground(Color.white);
             }
             else 
             {
                 x[i][j].setBackground(Color.black);
             }
             k23+=1;
         }
         k23+=1;
     }
     for(int i=0;i<32;i++)
     {
         graveyard[i]=new JLabel("");
         graveyard[i].setSize(64,64);
         graveyard[i].setMinimumSize(new java.awt.Dimension(64, 64));
         graveyard[i].setMaximumSize(new java.awt.Dimension(64, 64));
         graveyard[i].setOpaque(true);
     }
     jPanel1.add(x[0][0]);
     jPanel2.add(x[0][1]);
     jPanel3.add(x[0][2]);
     jPanel4.add(x[0][3]);
     jPanel5.add(x[0][4]);
     jPanel6.add(x[0][5]);
     jPanel7.add(x[0][6]);
     jPanel8.add(x[0][7]);
     
     jPanel9.add(x[1][0]);
     jPanel10.add(x[1][1]);
     jPanel11.add(x[1][2]);
     jPanel12.add(x[1][3]);
     jPanel13.add(x[1][4]);
     jPanel14.add(x[1][5]);
     jPanel15.add(x[1][6]);
     jPanel16.add(x[1][7]);
     
     jPanel17.add(x[2][0]);
     jPanel18.add(x[2][1]);
     jPanel19.add(x[2][2]);
     jPanel20.add(x[2][3]);
     jPanel21.add(x[2][4]);
     jPanel22.add(x[2][5]);
     jPanel23.add(x[2][6]);
     jPanel24.add(x[2][7]);
     
     jPanel25.add(x[3][0]);
     jPanel26.add(x[3][1]);
     jPanel27.add(x[3][2]);
     jPanel28.add(x[3][3]);
     jPanel29.add(x[3][4]);
     jPanel30.add(x[3][5]);
     jPanel31.add(x[3][6]);
     jPanel32.add(x[3][7]);
     
     jPanel33.add(x[4][0]);
     jPanel34.add(x[4][1]);
     jPanel35.add(x[4][2]);
     jPanel36.add(x[4][3]);
     jPanel37.add(x[4][4]);
     jPanel38.add(x[4][5]);
     jPanel39.add(x[4][6]);
     jPanel40.add(x[4][7]);
     
     jPanel41.add(x[5][0]);
     jPanel42.add(x[5][1]);
     jPanel43.add(x[5][2]);
     jPanel44.add(x[5][3]);
     jPanel45.add(x[5][4]);
     jPanel46.add(x[5][5]);
     jPanel47.add(x[5][6]);
     jPanel48.add(x[5][7]);
     
     jPanel49.add(x[6][0]);
     jPanel50.add(x[6][1]);
     jPanel51.add(x[6][2]);
     jPanel52.add(x[6][3]);
     jPanel53.add(x[6][4]);
     jPanel54.add(x[6][5]);
     jPanel55.add(x[6][6]);
     jPanel56.add(x[6][7]);
     
     jPanel57.add(x[7][0]);
     jPanel58.add(x[7][1]);
     jPanel59.add(x[7][2]);
     jPanel60.add(x[7][3]);
     jPanel61.add(x[7][4]);
     jPanel62.add(x[7][5]);
     jPanel63.add(x[7][6]);
     jPanel64.add(x[7][7]);
     
     jPanel65.add(graveyard[0]);
     jPanel66.add(graveyard[1]);
     jPanel67.add(graveyard[2]);
     jPanel68.add(graveyard[3]);
     jPanel69.add(graveyard[4]);
     jPanel70.add(graveyard[5]);
     jPanel71.add(graveyard[6]);
     jPanel72.add(graveyard[7]);
     jPanel73.add(graveyard[8]);
     jPanel74.add(graveyard[9]);
     jPanel75.add(graveyard[10]);
     jPanel76.add(graveyard[11]);
     jPanel77.add(graveyard[12]);
     jPanel78.add(graveyard[13]);
     jPanel79.add(graveyard[14]);
     jPanel80.add(graveyard[15]);
     jPanel81.add(graveyard[16]);
     jPanel82.add(graveyard[17]);
     jPanel83.add(graveyard[18]);
     jPanel84.add(graveyard[19]);
     jPanel85.add(graveyard[20]);
     jPanel86.add(graveyard[21]);
     jPanel87.add(graveyard[22]);
     jPanel88.add(graveyard[23]);
     jPanel89.add(graveyard[24]);
     jPanel90.add(graveyard[25]);
     jPanel91.add(graveyard[26]);
     jPanel92.add(graveyard[27]);
     jPanel93.add(graveyard[28]);
     jPanel94.add(graveyard[29]);
     jPanel95.add(graveyard[30]);
     jPanel96.add(graveyard[31]);
     
 }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SKAKI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SKAKI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SKAKI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SKAKI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SKAKI1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SCORE;
    private javax.swing.JButton jButtonNO;
    private javax.swing.JButton jButtonYes;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JMenuItem jINFO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuRESTART;
    private javax.swing.JMenuItem jMenuSCORE;
    private javax.swing.JMenuItem jMenuSURRENDER;
    private javax.swing.JMenuItem jMenuUndo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel66;
    private javax.swing.JPanel jPanel67;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel71;
    private javax.swing.JPanel jPanel72;
    private javax.swing.JPanel jPanel73;
    private javax.swing.JPanel jPanel74;
    private javax.swing.JPanel jPanel75;
    private javax.swing.JPanel jPanel76;
    private javax.swing.JPanel jPanel77;
    private javax.swing.JPanel jPanel78;
    private javax.swing.JPanel jPanel79;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel80;
    private javax.swing.JPanel jPanel81;
    private javax.swing.JPanel jPanel82;
    private javax.swing.JPanel jPanel83;
    private javax.swing.JPanel jPanel84;
    private javax.swing.JPanel jPanel85;
    private javax.swing.JPanel jPanel86;
    private javax.swing.JPanel jPanel87;
    private javax.swing.JPanel jPanel88;
    private javax.swing.JPanel jPanel89;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel90;
    private javax.swing.JPanel jPanel91;
    private javax.swing.JPanel jPanel92;
    private javax.swing.JPanel jPanel93;
    private javax.swing.JPanel jPanel94;
    private javax.swing.JPanel jPanel95;
    private javax.swing.JPanel jPanel96;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
